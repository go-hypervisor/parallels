///////////////////////////////////////////////////////////////////////////////
///
/// PrlEnums.h
///
/// This file is the part of parallels public sdk library
///
///
/// Copyright (c) Parallels International GmbH.
/// All rights reserved.
/// http://www.parallels.com
///
///////////////////////////////////////////////////////////////////////////////

#ifndef __PARALLELS_API_ENUMS_H__
#define __PARALLELS_API_ENUMS_H__

/* The _PRL_HANDLE_TYPE enumeration defines handle types. Each
   handle type and the functions that operate on it is described
   in detail in the "Functions by Handle" chapter of the
   Parallels C API Reference guide.                              */
typedef enum _PRL_HANDLE_TYPE
{
	PHT_ERROR									= 0,
	PHT_SERVER									= 0x10000001,
	PHT_SERVER_CONFIG							= 0x10000002,
	PHT_REMOTE_FILESYSTEM_INFO					= 0x10000003,
	PHT_REMOTE_FILESYSTEM_ENTRY					= 0x10000004,
	PHT_VIRTUAL_MACHINE							= 0x10000005,
	PHT_VIRTUAL_DEV_DISPLAY						= 0x10000006,
	PHT_VIRTUAL_DEV_KEYBOARD					= 0x10000007,
	PHT_VIRTUAL_DEV_MOUSE						= 0x10000008,
	PHT_VIRTUAL_DEV_FLOPPY						= 0x10000009,
	PHT_VIRTUAL_DEV_HARD_DISK					= 0x1000000A,
	PHT_VIRTUAL_DEV_NET_ADAPTER					= 0x1000000B,
	PHT_VIRTUAL_DEV_PARALLEL_PORT				= 0x1000000C,
	PHT_VIRTUAL_DEV_SERIAL_PORT					= 0x1000000D,
	PHT_VIRTUAL_DEV_OPTICAL_DISK				= 0x1000000E,
	PHT_VIRTUAL_DEV_USB_DEVICE					= 0x1000000F,
	PHT_VIRTUAL_DEV_SOUND						= 0x10000010,
	PHT_JOB										= 0x10000011,
	PHT_EVENT									= 0x10000012,
	PHT_RESULT									= 0x10000013,
	PHT_VM_INFO									= 0x10000014,
	PHT_USER_PROFILE							= 0x10000015,
	PHT_DISP_CONFIG								= 0x10000016,
	PHT_SHARE									= 0x10000017,
	PHT_SCREEN_RESOLUTION						= 0x10000018,
	PHT_DISP_NET_ADAPTER						= 0x10000019,
	PHT_HW_GENERIC_DEVICE						= 0x1000001A,
	PHT_HW_HARD_DISK							= 0x1000001B,
	PHT_HW_HARD_DISK_PARTITION					= 0x1000001C,
	PHT_HW_NET_ADAPTER							= 0x1000001D,
	PHT_EVENT_PARAMETER							= 0x1000001E,
	PHT_REMOTEDEV_CMD							= 0x1000001F,
	PHT_SYSTEM_STATISTICS						= 0x10000020,
	PHT_SYSTEM_STATISTICS_CPU					= 0x10000021,
	PHT_SYSTEM_STATISTICS_IFACE					= 0x10000022,
	PHT_SYSTEM_STATISTICS_USER_SESSION			= 0x10000023,
	PHT_SYSTEM_STATISTICS_DISK					= 0x10000024,
	PHT_SYSTEM_STATISTICS_DISK_PARTITION		= 0x10000025,
	PHT_SYSTEM_STATISTICS_PROCESS				= 0x10000026,
	PHT_LICENSE									= 0x10000027,
	PHT_SERVER_INFO								= 0x10000028,
	PHT_BOOT_DEVICE								= 0x10000029,
	PHT_STRINGS_LIST							= 0x1000002A,
	PHT_LOGIN_RESPONSE							= 0x1000002B,
	PHT_RUNNING_TASK							= 0x1000002C,
	PHT_NET_SERVICE_STATUS						= 0x1000002D,
	PHT_HANDLES_LIST							= 0x1000002E,
	PHT_VIRTUAL_DISK							= 0x1000002F,
	PHT_ACCESS_RIGHTS							= 0x10000030,
	PHT_VM_TOOLS_INFO							= 0x10000031,
	PHT_FOUND_VM_INFO							= 0x10000032,
	PHT_TIS_RECORD								= 0x10000033,
	PHT_USER_INFO								= 0x10000034,
	PHT_VM_CONFIGURATION						= PHT_VIRTUAL_MACHINE,
	PHT_TIS_EMITTER								= 0x10000036,
	PHT_TOOL									= 0x10000037,
	PHT_VIRTUAL_DEV_HD_PARTITION				= 0x10000038,
	PHT_VIRTUAL_DEV_GENERIC_PCI					= 0x10000039,
	PHT_VIRTUAL_DEV_GENERIC_SCSI				= 0x1000003A,
	PHT_VM_GUEST_SESSION						= 0x1000003B,
	PHT_VIRTUAL_NETWORK							= 0x1000003C,
	PHT_PORT_FORWARDING							= 0x1000003D,
	PHT_HW_GENERIC_PCI_DEVICE					= 0x1000003E,
	PHT_OPAQUE_TYPE_LIST						= 0x1000003F,
	PHT_GUEST_OSES_MATRIX						= 0x10000040,
	PHT_PROBLEM_REPORT							= 0x10000041,
	PHT_APPLIANCE_CONFIG						= 0x10000042,
	PHT_OFFLINE_SERVICE_OBSOLETE				= 0x10000043,
	PHT_VM_VIRTUAL_DEVICES_INFO					= 0x10000044,
	PHT_NETWORK_CLASS_OBSOLETE					= 0x10000045,
	PHT_NETWORK_SHAPING_OBSOLETE				= 0x10000046,
	PHT_NETWORK_RATE_OBSOLETE					= 0x10000047,
	PHT_ISCSI_LUN								= 0x10000048,
	PHT_CT_TEMPLATE_OBSOLETE					= 0x10000049,
	PHT_UIEMU_INPUT								= 0x10000050,
	PHT_USB_IDENTITY							= 0x10000051,
	PHT_FIREWALL_RULE_OBSOLETE					= 0x10000052,
	PHT_IPPRIV_NET_OBSOLETE						= 0x10000053,
	PHT_PLUGIN_INFO								= 0x10000054,
	PHT_CVSRC									= 0x10000055,
	PHT_DESKTOP_CONTROL							= 0x10000056,
	PHT_BACKUP_RESULT_OBSOLETE					= 0x10000057,
	PHT_NETWORK_SHAPING_CONFIG_OBSOLETE			= 0x10000058,
	PHT_NETWORK_SHAPING_BANDWIDTH_OBSOLETE		= 0x10000059,
	PHT_SYSTEM_STATISTICS_VM_DATA				= 0x1000005A,
	PHT_VIDEO_RECEIVER							= 0x1000005B,
	PHT_SESSION_INFO							= 0x1000005C,
	PHT_CPU_FEATURES_OBSOLETE					= 0x1000005D,
	PHT_SHARED_ITEM								= 0x1000005E,
	PHT_BACKUP									= 0x1000005F,
	PHT_BACKUP_FILE								= 0x10000060,
	PHT_BACKUP_FILE_DIFF						= 0x10000061,
	PHT_BACKUP_INFO								= 0x10000062,
	PHT_BACKUP_PARAMS							= 0x10000063,
	PHT_VIRTUAL_DISK_PARAMS						= 0x10000064,
	PHT_VIRTUAL_DISK_STORAGE_PARAMS				= 0x10000065,
	PHT_VIRTUAL_DISK_STATE_PARAMS				= 0x10000066,
	PHT_VIRTUAL_DISK_OP_PARAMS					= 0x10000067,
	PHT_LOGIN_PARAMS							= 0x10000068,
	PHT_VM_REGISTER_PARAMS						= 0x10000069,
	PHT_VM_GUEST_OS_INFO          = 0x10000070,
	PHT_THIRD_PARTY_VM_CONVERT_PARAMS			= 0x10000071,
	PHT_THIRD_PARTY_VM_CONVERT_RESULT			= 0x10000072,

	PHT_LAST = PHT_THIRD_PARTY_VM_CONVERT_RESULT // should be set to last
} PRL_HANDLE_TYPE;
typedef PRL_HANDLE_TYPE* PRL_HANDLE_TYPE_PTR;

/**
 * Job status enumeration
 */
typedef enum _PRL_JOB_STATUS
{
	PJS_UNKNOWN  = 0,
	PJS_RUNNING  = 0xD0000001,
	PJS_FINISHED = 0xD0000002,

} PRL_JOB_STATUS;
typedef PRL_JOB_STATUS* PRL_JOB_STATUS_PTR;

/**
 * VM device emulation type
 */
typedef	enum _PRL_VM_DEV_EMULATION_TYPE
{
	PDT_ANY_TYPE = 0xffff,
	PDT_USE_REAL_DEVICE = 0,
	PDT_USE_IMAGE_FILE = 1,
	PDT_USE_OUTPUT_FILE = 2,
	PDT_USE_OTHER = 3,
	PDT_USE_DIRECT_ASSIGN = 4,
	PDT_USE_FILE_SYSTEM = 5,
	PDT_USE_REAL_FLOPPY = PDT_USE_REAL_DEVICE,
	PDT_USE_REAL_HDD = PDT_USE_REAL_DEVICE,
	PDT_USE_REAL_CDDVD = PDT_USE_REAL_DEVICE,
	PDT_USE_REAL_SERIAL_PORT = PDT_USE_REAL_DEVICE,
	PDT_USE_SERIAL_PORT_SOCKET_MODE = PDT_USE_OTHER,
	PDT_USE_REAL_PARALLEL_PORT = PDT_USE_REAL_DEVICE,
	PDT_USE_PARALLEL_PORT_PRINTER_MODE = PDT_USE_OTHER,
	PDT_USE_PARALLEL_PORT_PRINT_TO_PDF_MODE = PDT_USE_IMAGE_FILE,
	PDT_USE_HOST_ONLY_NETWORK = PDT_USE_REAL_DEVICE,
	PDT_USE_SHARED_NETWORK = PDT_USE_IMAGE_FILE,
	PDT_USE_BRIDGE_ETHERNET = PDT_USE_OUTPUT_FILE,
	PDT_USE_AC97_SOUND = PDT_USE_REAL_DEVICE,
	PDT_USE_CREATIVE_SB16_SOUND = PDT_USE_IMAGE_FILE,
	PDT_USE_INTEL_HDA_SOUND = PDT_USE_OUTPUT_FILE,
	PDT_USE_REAL_USB_CONTROLLER = PDT_USE_REAL_DEVICE,
	PDT_USE_BOOTCAMP = PDT_USE_OTHER
} PRL_VM_DEV_EMULATION_TYPE;
typedef PRL_VM_DEV_EMULATION_TYPE* PRL_VM_DEV_EMULATION_TYPE_PTR;

/**
 * Mass storage device interface type
 */
typedef enum _PRL_MASS_STORAGE_INTERFACE_TYPE
{
	PMS_IDE_DEVICE = 0,
	PMS_SCSI_DEVICE = 1,
	PMS_SATA_DEVICE = 2,
	PMS_NVME_DEVICE = 3,
	PMS_UFS_DEVICE = 4,
	PMS_UNKNOWN_DEVICE = 255,
} PRL_MASS_STORAGE_INTERFACE_TYPE;
typedef PRL_MASS_STORAGE_INTERFACE_TYPE* PRL_MASS_STORAGE_INTERFACE_TYPE_PTR;

/**
 * Printer device interface type
 */
typedef enum _PRL_PRINTER_INTERFACE_TYPE
{
	PRN_LPT_DEVICE = 0,
	PRN_USB_DEVICE = 1,
	PRN_UNKNOWN_DEVICE = 255,
} PRL_PRINTER_INTERFACE_TYPE;
typedef PRL_PRINTER_INTERFACE_TYPE* PRL_PRINTER_INTERFACE_TYPE_PTR;

/**
 * Hard disk image type
 */
typedef enum _PRL_HARD_DISK_INTERNAL_FORMAT
{
	PHD_PLAIN_HARD_DISK = 0,
	PHD_EXPANDING_HARD_DISK = 1
} PRL_HARD_DISK_INTERNAL_FORMAT;
typedef PRL_HARD_DISK_INTERNAL_FORMAT* PRL_HARD_DISK_INTERNAL_FORMAT_PTR;

/**
 * Serial port operation mode when on socket
 */
typedef enum _PRL_SERIAL_PORT_SOCKET_OPERATION_MODE
{
	PSP_SERIAL_SOCKET_SERVER = 0,
	PSP_SERIAL_SOCKET_CLIENT = 1
} PRL_SERIAL_PORT_SOCKET_OPERATION_MODE;
typedef PRL_SERIAL_PORT_SOCKET_OPERATION_MODE* PRL_SERIAL_PORT_SOCKET_OPERATION_MODE_PTR;

/**
 * CPU mode
 */
typedef enum _PRL_CPU_MODE
{
	PCM_CPU_MODE_32 = 0,
	PCM_CPU_MODE_64 = 1
} PRL_CPU_MODE;
typedef PRL_CPU_MODE* PRL_CPU_MODE_PTR;

/**
 * CPU type
 */
typedef enum _PRL_CPU_TYPE
{
	PCTP_CPU_TYPE_X86 = 0,
	PCTP_CPU_TYPE_ARM = 1,
} PRL_CPU_TYPE;
typedef PRL_CPU_TYPE* PRL_CPU_TYPE_PTR;

/**
* CPU HVT mode
*/
typedef enum _PRL_CPU_HVT
{
	PCM_CPU_NONE_HV = 0,
	PCM_CPU_INTEL_VT_X,
	PCM_CPU_AMD_V
} PRL_CPU_HVT;
typedef PRL_CPU_HVT* PRL_CPU_HVT_PTR;
typedef enum _PRL_CPU_HVT PRL_CPU_VTX_MODE;
typedef PRL_CPU_HVT* PRL_CPU_VTX_MODE_PTR;


/**
 * Acceleration level
 */
typedef enum _PRL_VM_ACCELERATION_LEVEL
{
	PVA_ACCELERATION_DISABLED = 0,
	PVA_ACCELERATION_NORMAL = 1,
	PVA_ACCELERATION_HIGH = 2
} PRL_VM_ACCELERATION_LEVEL;
typedef PRL_VM_ACCELERATION_LEVEL* PRL_VM_ACCELERATION_LEVEL_PTR;

/**
 * VM autostart options
 */
typedef enum _PRL_VM_AUTOSTART_OPTION
{
	PAO_VM_START_MANUAL = 0,
	PAO_VM_START_ON_LOAD = 1,
	PAO_VM_START_ON_RELOAD = 2,
	PAO_VM_START_ON_GUI_APP_STARTUP = 3,
	PAO_VM_START_ON_GUI_VM_WINDOW_OPEN = 4,
	PAO_VM_START_ON_USER_LOGIN = 5,

	// OBSOLETE CONSTANTS
	PAO_VM_START_ON_GUI_WINDOW_LOAD = PAO_VM_START_ON_GUI_APP_STARTUP,
} PRL_VM_AUTOSTART_OPTION;
typedef PRL_VM_AUTOSTART_OPTION* PRL_VM_AUTOSTART_OPTION_PTR;

/**
 * VM start login mode
 */
typedef enum _PRL_VM_START_LOGIN_MODE
{
	PLM_START_ACCOUNT = 0,
	PLM_ROOT_ACCOUNT = 1,
	PLM_USER_ACCOUNT = 2,

	// Obsolete values for compatibility
	PLM_START_ACOUNT = PLM_START_ACCOUNT,
	PLM_ROOT_ACOUNT = PLM_ROOT_ACCOUNT,
	PLM_USER_ACOUNT = PLM_USER_ACCOUNT
} PRL_VM_START_LOGIN_MODE;
typedef PRL_VM_START_LOGIN_MODE* PRL_VM_START_LOGIN_MODE_PTR;

/**
 * VM autostop options
 */
typedef enum _PRL_VM_AUTOSTOP_OPTION
{
	PAO_VM_STOP = 0,
	PAO_VM_SUSPEND = 1,
	PAO_VM_SHUTDOWN = 2
} PRL_VM_AUTOSTOP_OPTION;
typedef PRL_VM_AUTOSTOP_OPTION* PRL_VM_AUTOSTOP_OPTION_PTR;

/**
 * VM window mode
 */
typedef enum _PRL_VM_WINDOW_MODE
{
	PWM_DEFAULT_WINDOW_MODE = 0,
	PWM_WINDOWED_WINDOW_MODE = 1,
	PWM_FULL_SCREEN_WINDOW_MODE = 2,
	PWM_COHERENCE_WINDOW_MODE = 3,
	PWM_MODALITY_WINDOW_MODE = 4,
	PWM_HEADLESS_WINDOW_MODE = 5
} PRL_VM_WINDOW_MODE;
typedef PRL_VM_WINDOW_MODE* PRL_VM_WINDOW_MODE_PTR;

/**
 * Window corners
 */
typedef enum _PRL_WINDOW_CORNERS
{
	PWC_TOP_LEFT_CORNER			= 0,
	PWC_TOP_RIGHT_CORNER		= 1,
	PWC_BOTTOM_LEFT_CORNER		= 2,
	PWC_BOTTOM_RIGHT_CORNER		= 3
} PRL_WINDOW_CORNERS;
typedef PRL_WINDOW_CORNERS* PRL_WINDOW_CORNERS_PTR;

/**
 * Window corner actions
 */
typedef enum _PRL_CORNER_ACTIONS
{
	PCA_NO_ACTION				= 0,
	PCA_WINDOWED				= 1,
    PCA_COHERENCE				= 2,
    PCA_SEAMLESS				= 3,
    PCA_MODALITY				= 4,
    PCA_HIDE_APPLICATION		= 5,
    PCA_UNGRAB_INPUT			= 6,
    PCA_CRYSTAL				= 7
} PRL_CORNER_ACTIONS;
typedef PRL_CORNER_ACTIONS* PRL_CORNER_ACTIONS_PTR;

/**
 * Aspect ratio mode
 */
typedef enum _PRL_SCALE_VIEW_MODE
{
	PSVM_OFF								= 0,
	PSVM_AUTO								= 1,
	PSVM_KEEP_ASPECT_RATIO					= 2,
	PSVM_KEEP_ASPECT_RATIO_BY_EXPANDING		= 3,
	PSVM_IGNORE_ASPECT_RATIO				= 4,
} PRL_SCALE_VIEW_MODE;
typedef PRL_SCALE_VIEW_MODE* PRL_SCALE_VIEW_MODE_PTR;

/**
 * Action on VM when VM window gets closed
 */
typedef enum _PRL_VM_ACTION_ON_WINDOW_CLOSE
{
	PWC_VM_UNKNOWN_ACTION = 0xffff,
	PWC_VM_STOP = 0,
	PWC_VM_SUSPEND = 1,
	PWC_VM_ASK_USER = 2,
	PWC_VM_PAUSE = 3,
	PWC_VM_SHUTDOWN = 4,
	PWC_VM_DO_NOTHING = 5
} PRL_VM_ACTION_ON_WINDOW_CLOSE;
typedef PRL_VM_ACTION_ON_WINDOW_CLOSE* PRL_VM_ACTION_ON_WINDOW_CLOSE_PTR;

/**
 * Action when VM gets stopped
 */
typedef enum _PRL_VM_ACTION_ON_STOP
{
	PAS_KEEP_VM_WINDOW_OPEN = 0,
	PAS_CLOSE_VM_WINDOW = 1,
	PAS_QUIT_APPLICATION = 2
} PRL_VM_ACTION_ON_STOP;
typedef PRL_VM_ACTION_ON_STOP* PRL_VM_ACTION_ON_STOP_PTR;

/**
 * VM boot order
 */
typedef enum _PRL_VM_BOOT_ORDER
{
	PBO_HDD_CD_FLOPPY = 0,
	PBO_FLOPPY_HDD_CD = 1,
	PBO_CD_HDD_FLOPPY = 2
} PRL_VM_BOOT_ORDER;
typedef PRL_VM_BOOT_ORDER* PRL_VM_BOOT_ORDER_PTR;

/**
 * Device in use Action
 */
typedef enum _PRL_DEVICE_ACTION
{
	PDA_DEVICE_IDLE = 0,
	PDA_DEVICE_READ = 1,
	PDA_DEVICE_WRITE = 2
} PRL_DEVICE_ACTION;
typedef PRL_DEVICE_ACTION* PRL_DEVICE_ACTION_PTR;

/**
 * VM application in Dock mode
 */
typedef enum _PRL_APP_IN_DOCK_MODE
{
	PDM_APP_IN_DOCK_NEVER = 0,
	PDM_APP_IN_DOCK_COHERENCE_ONLY = 1,
	PDM_APP_IN_DOCK_ALWAYS = 2,
} PRL_APP_IN_DOCK_MODE;
typedef PRL_APP_IN_DOCK_MODE* PRL_APP_IN_DOCK_MODE_PTR;

/**
 * VM application icon type in Dock
 */
typedef enum _PRL_DOCK_ICON_TYPE
{
	PIT_DOCK_ICON_SYSTEM = 0,
	PIT_DOCK_ICON_LIVE_SCREEN_SHOT = 1,
	PIT_DOCK_ICON_START_MENU = 2,
} PRL_DOCK_ICON_TYPE;
typedef PRL_DOCK_ICON_TYPE* PRL_DOCK_ICON_TYPE_PTR;

/**
 * Background/foreground VM processes priority
 */
typedef enum _PRL_VM_PRIORITY
{
	PVR_PRIORITY_LOW = 0,
	PVR_PRIORITY_NORMAL = 1,
	PVR_PRIORITY_HIGH = 2
} PRL_VM_PRIORITY;
typedef PRL_VM_PRIORITY* PRL_VM_PRIORITY_PTR;

/**
 * Network adapter emulated type
 */
typedef enum _PRL_NET_ADAPTER_EMULATED_TYPE
{
	PNA_HOST_ONLY = 0,
	PNA_SHARED = 1,
	PNA_BRIDGED_ETHERNET = 2,
	//PNA_CUSTOM= 3 // not currently supported!
	PNA_DIRECT_ASSIGN = 4,
	PNA_ROUTED_OBSOLETE = 5,
} PRL_NET_ADAPTER_EMULATED_TYPE;
typedef PRL_NET_ADAPTER_EMULATED_TYPE* PRL_NET_ADAPTER_EMULATED_TYPE_PTR;

/**
 * Virtual Network type. Should match values in Libraries\PrlNetworking\prl_netconfig.h
 */
typedef enum _PRL_NET_VIRTUAL_NETWORK_TYPE
{
	PVN_BRIDGED_ETHERNET = 0,
	PVN_HOST_ONLY = 1
} PRL_NET_VIRTUAL_NETWORK_TYPE;
typedef PRL_NET_VIRTUAL_NETWORK_TYPE* PRL_NET_VIRTUAL_NETWORK_TYPE_PTR;

/**
 * constant for invalid VLAN tag
 */
#define PRL_INVALID_VLAN_TAG 0xffff

/**
 * constant for maximum valid VLAN tag (4095)
 */
#define PRL_MAX_VLAN_TAG 0xfff

/**
 * Virtual machine states enumeration
 */
typedef enum _VIRTUAL_MACHINE_STATE
{
	VMS_UNKNOWN		= 0,

	VMS_STOPPED     = 0x30000001,
	VMS_STARTING    = 0x30000002,
	VMS_RESTORING   = 0x30000003,
	VMS_RUNNING     = 0x30000004,
	VMS_PAUSED      = 0x30000005,
	VMS_SUSPENDING  = 0x30000006,
	VMS_STOPPING    = 0x30000007,
	VMS_COMPACTING  = 0x30000008,
	VMS_SUSPENDED   = 0x30000009,
	VMS_SNAPSHOTING = 0x3000000A,
	VMS_RESETTING	= 0x3000000B,
	VMS_PAUSING		= 0x3000000C,
	VMS_CONTINUING	= 0x3000000D,
	VMS_MIGRATING_OBSOLETE = 0x3000000E,
	VMS_DELETING_STATE	= 0x3000000F,
	VMS_RESUMING	= 0x30000010,
	VMS_SUSPENDING_SYNC	= 0x30000011,
	VMS_RECONNECTING_OBSOLETE = 0x30000012,
	VMS_MOUNTED_OBSOLETE = 0x30000013,
} VIRTUAL_MACHINE_STATE;
typedef VIRTUAL_MACHINE_STATE* VIRTUAL_MACHINE_STATE_PTR;

/**
* Virtual machine addition states enumeration, may be combined with bitwise |
*/
typedef enum _VIRTUAL_MACHINE_ADDITION_STATE
{
	VMAS_NOSTATE	= 1 << 0,

	VMAS_BACKUPING_OBSOLETE = 1 << 1,
	VMAS_RESTORING_FROM_BACKUP_OBSOLETE = 1 << 2,
	VMAS_ENCRYPTING = 1 << 3,
	VMAS_DECRYPTING = 1 << 4,
	VMAS_CLONING	= 1 << 5,
	VMAS_MOVING	= 1 << 6,
	VMAS_ARCHIVING	= 1 << 7,
	VMAS_UNARCHIVING	= 1 << 8,
	VMAS_PACKING	= 1 << 9,
	VMAS_UNPACKING	= 1 << 10,
	VMAS_MAX = 1 << 31
} VIRTUAL_MACHINE_ADDITION_STATE;
typedef VIRTUAL_MACHINE_ADDITION_STATE* VIRTUAL_MACHINE_ADDITION_STATE_PTR;

/**
 * Virtual machine tools states enumeration
 */
typedef enum _PRL_VM_TOOLS_STATE
{
	PTS_UNKNOWN				= 0,
	PTS_POSSIBLY_INSTALLED	= PTS_UNKNOWN,
	PTS_NOT_INSTALLED		= 1,
	PTS_INSTALLED			= 2,
	PTS_OUTDATED			= 3,

} PRL_VM_TOOLS_STATE;
typedef PRL_VM_TOOLS_STATE* PRL_VM_TOOLS_STATE_PTR;

typedef enum _PRL_VM_MOUSE_STATE
{
	PTS_RELATIVE_MOUSE		= 0,
	PTS_SLIDING_MOUSE		= 1,
	PTS_ABSOLUTE_MOUSE		= 2

} PRL_VM_MOUSE_STATE;
typedef PRL_VM_MOUSE_STATE* PRL_VM_MOUSE_STATE_PTR;

typedef enum _PRL_VM_MOUSE_CURSOR_STATE
{
	PTS_NO_CURSOR			= 0,
	PTS_SLIDING_CURSOR		= 1,
	PTS_MOVING_CURSOR		= 2

} PRL_VM_MOUSE_CURSOR_STATE;
typedef PRL_VM_MOUSE_CURSOR_STATE* PRL_VM_MOUSE_CURSOR_STATE_PTR;

typedef enum _PRL_IO_STATE
{
	IOS_DISABLED           = 0, /**< Desktop has not been enabled */
	IOS_STARTED            = 1, /**< Successfully started.(local and remote) */
	IOS_STOPPED            = 2, /**< Is stopped. (local and remote) */
	IOS_UNKNOWN_VM_UUID    = 3, /**< Unknown uuid. (local and remote) */
	IOS_CONNECTION_TIMEOUT = 4, /**< Connection timeout. (remote) */
	IOS_AUTH_FAILED        = 5, /**< Authentication failed. (remote) */

} PRL_IO_STATE;
typedef PRL_IO_STATE* PRL_IO_STATE_PTR;

typedef enum _PRL_MOUSE_BUTTON
{
	PMB_NOBUTTON      = 0,
	PMB_LEFT_BUTTON   = 1 << 0,
	PMB_RIGHT_BUTTON  = 1 << 1,
	PMB_MIDDLE_BUTTON = 1 << 2,
	PMB_XBUTTON1	  = 1 << 3,
	PMB_XBUTTON2	  = 1 << 4,
	PMB_XBUTTON3	  = 1 << 5,
	PMB_XBUTTON4	  = 1 << 6,
	PMB_XBUTTON5	  = 1 << 7,

	PMB_BUTTONS_MASK  = 0xff,

	PMB_PEN_IN_RANGE  = 1 << 8,
	PMB_PEN_TIP		  = 1 << 9,
	PMB_PEN_BARREL	  = 1 << 10,
	PMB_PEN_INVERT	  = 1 << 11,
	PMB_PEN_ERASE	  = 1 << 12,

	PMB_PEN_MASK	  = 0xff00
} PRL_MOUSE_BUTTON;
typedef PRL_MOUSE_BUTTON* PRL_MOUSE_BUTTON_PTR;

typedef enum _PRL_KEY_EVENT
{
	PKE_PRESS    = 0x0,
	PKE_RELEASE  = 0x80,

} PRL_KEY_EVENT;
typedef PRL_KEY_EVENT* PRL_KEY_EVENT_PTR;

typedef enum _PRL_IMAGE_FORMAT
{
	PIF_RAW      = 0x50000008,
	PIF_BMP      = 0x50000009,
	PIF_JPG      = 0x5000000A,
	PIF_PNG      = 0x5000000B

} PRL_IMAGE_FORMAT;
typedef PRL_IMAGE_FORMAT* PRL_IMAGE_FORMAT_PTR;

/**
 * Host OS type
 */
typedef enum _PRL_HOST_OS_TYPE
{
	PHO_MAC = 0,
	PHO_LIN = 1,
	PHO_WIN = 2,
	PHO_UNKNOWN = 0xFF
} PRL_HOST_OS_TYPE;
typedef PRL_HOST_OS_TYPE* PRL_HOST_OS_TYPE_PTR;

/**
 * Device type
 */
typedef enum _PRL_DEVICE_TYPE
{
	PDE_GENERIC_DEVICE					= 0,
	PDE_CLUSTERED_DEVICE				= 1,
	PDE_STORAGE_DEVICE					= 2,
	PDE_FLOPPY_DISK						= 3,
	PDE_MASSSTORAGE_DEVICE				= 4,
	PDE_OPTICAL_DISK					= 5,
	PDE_HARD_DISK						= 6,
	PDE_GENERIC_NETWORK_ADAPTER			= 8,
	PDE_GENERIC_PORT					= 9,
	PDE_SERIAL_PORT						= 10,
	PDE_PARALLEL_PORT					= 11,
	PDE_SOUND_DEVICE					= 12,
	PDE_MIXER_DEVICE					= 13,
	PDE_USB_DEVICE						= 15,
	PDE_PRINTER							= 16,
	PDE_GENERIC_PCI_DEVICE				= 17,
	PDE_GENERIC_SCSI_DEVICE				= 18,
	PDE_VIRTUAL_SNAPSHOT_DEVICE			= 19,
	PDE_PCI_VIDEO_ADAPTER				= 20,
	PDE_VIRTUAL_SHARED_FOLDERS_DEVICE	= 21,
	PDE_CAMERA							= 22,
	PDE_SHARED_CAMERA					= PDE_CAMERA, // for backward compatibility
	PDE_SMART_CARD_READER				= 23,
	PDE_SHARED_CCID						= PDE_SMART_CARD_READER, // for backward compatibility
	PDE_GENERIC_NVME_DEVICE				= 24,
	PDE_HID_DEVICE						= 25,
	PDE_TPM_DEVICE						= 26,
	PDE_BLUETOOTH_DEVICE				= 27,
	PDE_MAX
} PRL_DEVICE_TYPE;
typedef PRL_DEVICE_TYPE* PRL_DEVICE_TYPE_PTR;

/**
 * Virtual machine device bus type
 */
typedef enum _PRL_DEVICE_BUS_TYPE
{
	PDBT_PCI			= 0,
	PDBT_ACPI			= 1,

} PRL_DEVICE_BUS_TYPE;
typedef PRL_DEVICE_BUS_TYPE* PRL_DEVICE_BUS_TYPE_PTR;

/**
 * Network adapter types in hardware info list
 */
typedef enum _PRL_HW_INFO_NET_ADAPTER_TYPE
{
	PHI_REAL_NET_ADAPTER = 0,
	PHI_VIRTUAL_NET_ADAPTER = 1,
	PHY_WIFI_REAL_NET_ADAPTER = 2,
} PRL_HW_INFO_NET_ADAPTER_TYPE;
typedef PRL_HW_INFO_NET_ADAPTER_TYPE* PRL_HW_INFO_NET_ADAPTER_TYPE_PTR;

/**
 * Event parameters fields types
 */
typedef enum _PRL_PARAM_FIELD_DATA_TYPE
{
	PFD_UINT32			= 0,
	PFD_STRING			= 1,
	PFD_INT32			= 2,
	PFD_CDATA			= 3,
	PFD_BOOLEAN			= 4,
	PFD_ENTITY			= 5,
	PFD_ENUMERATION		= 6,
	PFD_INT64			= 7,
	PFD_UINT64			= 8,
	PFD_BINARY			= 9,
	PFD_UNKNOWN			=0xFF
} PRL_PARAM_FIELD_DATA_TYPE;
typedef PRL_PARAM_FIELD_DATA_TYPE* PRL_PARAM_FIELD_DATA_TYPE_PTR;

/**
 * Event issuer type
 */
typedef enum _PRL_EVENT_ISSUER_TYPE
{
	PIE_VIRTUAL_MACHINE = 0,
	PIE_DISPATCHER		= 1,
	PIE_IO_SERVICE		= 2,
	PIE_WEB_SERVICE		= 3,
	PIE_UNKNOWN			= 0xFF
} PRL_EVENT_ISSUER_TYPE;
typedef PRL_EVENT_ISSUER_TYPE* PRL_EVENT_ISSUER_TYPE_PTR;

/**
 * File system general type
 */
typedef enum _PRL_FILE_SYSTEM_TYPE
{
	PFS_WINDOWS_LIKE_FS = 0,
	PFS_UNIX_LIKE_FS = 1
} PRL_FILE_SYSTEM_TYPE;
typedef PRL_FILE_SYSTEM_TYPE* PRL_FILE_SYSTEM_TYPE_PTR;


typedef enum _PRL_FILE_SYSTEM_FS_TYPE
{
	PRL_FS_INVALID	= 0,
	PRL_FS_FAT		= 1 ,
	PRL_FS_FAT32	= 2 ,
	PRL_FS_NTFS		= 3 ,
	PRL_FS_HFS		= 4 ,
	PRL_FS_ADFS		= 5 ,
	PRL_FS_AFFS		= 6 ,
	PRL_FS_AFS		= 7 ,
	PRL_FS_AUTOFS	= 8 ,
	PRL_FS_CODA		= 9 ,
	PRL_FS_EFS		= 10 ,
	PRL_FS_EXTFS	= 11 ,
	PRL_FS_HPFS		= 12 ,
	PRL_FS_ISOFS	= 13 ,
	PRL_FS_JFFS2	= 14 ,
	PRL_FS_NFS		= 15 ,
	PRL_FS_QNX4		= 16 ,
	PRL_FS_REISERFS = 17 ,
	PRL_FS_SMBFS	= 18 ,
	PRL_FS_GFS		= 19 ,
	PRL_FS_FUSE		= 20 ,
	PRL_FS_APFS		= 21 ,
	PRL_FS_EXFAT	= 22 ,
	PRL_FS_UNSPECIFIED = 0xFF
} PRL_FILE_SYSTEM_FS_TYPE;
typedef PRL_FILE_SYSTEM_FS_TYPE*	PRL_FILE_SYSTEM_FS_TYPE_PTR;
/**
 * File system element type
 */
typedef enum _PRL_FILE_SYSTEM_ELEMENT_TYPE
{
	PSE_DRIVE = 0,
	PSE_DIRECTORY = 1,
	PSE_FILE = 2
} PRL_FILE_SYSTEM_ELEMENT_TYPE;
typedef PRL_FILE_SYSTEM_ELEMENT_TYPE* PRL_FILE_SYSTEM_ELEMENT_TYPE_PTR;

/**
 * Process state element
 */
typedef enum _PRL_PROCESS_STATE_TYPE
{
	PPS_PROC_SLEEP = 0,
	PPS_PROC_RUN = 1,
	PPS_PROC_STOP = 2,
	PPS_PROC_ZOMBIE = 3,
	PPS_PROC_IDLE = 4,
} PRL_PROCESS_STATE_TYPE;
typedef PRL_PROCESS_STATE_TYPE* PRL_PROCESS_STATE_TYPE_PTR;

/**
 * Parallels license versions enumeration.
 */
typedef enum _PRL_VERSION_ENUM
{
	PRL_VERSION_ANY = 0,
	PRL_VERSION_3X = 1,
	PRL_VERSION_4X = 2,
	PRL_VERSION_5X = 3,
	PRL_VERSION_6X = 4,
	PRL_VERSION_7X = 5,
	PRL_VERSION_8X = 6,
	PRL_VERSION_9X = 7,
	PRL_VERSION_10X = 8,
	PRL_VERSION_11X = 9,
	PRL_VERSION_12X = 10,
	PRL_VERSION_13X = 11,
	PRL_VERSION_14X = 12,
	PRL_VERSION_15X = 13,
	PRL_VERSION_1X = 15,
} PRL_VERSION_ENUM;
typedef PRL_VERSION_ENUM* PRL_VERSION_ENUM_PTR;

/**
 * Parallels license products enumeration.
 */
typedef enum _PRL_PRODUCT_ENUM
{
	PRL_PRODUCT_ANY = 0,
	PRL_PRODUCT_DESKTOP = 1,
	PRL_PRODUCT_DESKTOP_SUBSCR = 7,

	/*  OBSOLETE CONSTANTS (for compatibility only) */
	PRL_PRODUCT_SERVER = 2,
	PRL_PRODUCT_WORKSTATION = 3,
	PRL_PRODUCT_STM = 4,
	PRL_PRODUCT_PLAYER = 5,
	PRL_PRODUCT_DESKTOP_WL = 6,
	PRL_PRODUCT_DESKTOP_PDE = PRL_PRODUCT_DESKTOP_SUBSCR,
} PRL_PRODUCT_ENUM;
typedef PRL_PRODUCT_ENUM* PRL_PRODUCT_ENUM_PTR;

/**
* Parallels license edition enumeration.
*/
typedef enum _PRL_EDITION_ENUM
{
	PRL_EDITION_ANY			= 0,
	PRL_EDITION_CONSUMER	= 1,
	PRL_EDITION_ENTERPRISE	= 2,
	PRL_EDITION_PROFESSIONAL= 3,
} PRL_EDITION_ENUM;
typedef PRL_EDITION_ENUM* PRL_EDITION_ENUM_PTR;

/*
 * License restriction options
 */
typedef enum _PRL_LICENSE_RESTRICTION_KEY
{
	/* NOTE to Parallels Developers:
	* DO NOT CHANGE ANY MEMBER NAME BECAUSE IT USES IN INTERNAL PROTOCOL( ParallelsDomModel.h )
	*/

	PLRK_UNKNOWN					= 0,
	PLRK_VM_CPU_LIMIT				= 1, /* Value is PRL_UINT32 */
	PLRK_VM_MEMORY_LIMIT			= 2, /* Value is PRL_UINT32 in Mb*/
	PLRK_VM_VTD_AVAILABLE			= 3, /* Value is PRL_UINT32 */
	PLRK_ALLOWED_GUEST_OS_VERSIONS	= 4, /* Value is PHT_OPAQUE_TYPE_LIST of Os version values from PrlOses.h */
	PLRK_RUNNING_VMS_LIMIT			= 5, /* Value is PRL_UINT32 (max count on the host)*/
	PLRK_VM_CREATE					= 6, /* Value is PRL_UINT32 - max count of Vm in system after this operation*/
	PLRK_VM_REGISTER				= 7, /* Value is PRL_UINT32 - max count of Vm in system after this operation*/
	PLRK_VM_IMPORT_3RD_PARTY		= 8, /* Value is PRL_UINT32 - max count of Vm in system after this operation*/
	PLRK_VM_CLONE					= 9, /* Value is PRL_UINT32 - max count of Vm in system after this operation*/
	PLRK_VM_CONVERT_TO_TEMPLATE		= 10, /* Value is PRL_UINT32*/
	PLRK_VM_CONVERT_FROM_TEMPLATE	= 11, /* Value is PRL_UINT32 */
	PLRK_VM_DOWNLOAD				= 12, /* Value is PRL_UINT32 */
	PLRK_VM_SUSPEND					= 13, /* Value is PRL_UINT32 */
	PLRK_VM_PAUSE					= 14, /* Value is PRL_UINT32 */
	PLRK_VM_SNAPSHOT_CREATE			= 15, /* Value is PRL_UINT32 */
	PLRK_VM_SNAPSHOT_SWITCH			= 16, /* Value is PRL_UINT32 */
	PLRK_VM_SNAPSHOT_DELETE			= 17, /* Value is PRL_UINT32 */
	PLRK_VM_SNAPSHOT_TREE			= 18, /* Value is PRL_UINT32 */
	PLRK_VM_UNDODISK_FEATURE		= 19, /* Value is PRL_UINT32 */
	PLRK_VM_SAFEMODE_FEATURE		= 20, /* Value is PRL_UINT32 */
	PLRK_VM_SMARTGUARD_FEATURE		= 21, /* Value is PRL_UINT32 */
	PLRK_VM_SHOW_FULLSCREEN			= 22, /* Value is PRL_UINT32 */
	PLRK_RUNNING_VMS_LIMIT_PER_USER	= 23, /* Value is PRL_UINT32 */ /* Look also at PLRK_RUNNING_VMS_LIMIT */
	PLRK_FORBIDDEN_GUEST_OS_TYPES = 24, /* Value is PHT_OPAQUE_TYPE_LIST of Os type values from PrlOses.h */
} PRL_LICENSE_RESTRICTION_KEY;
typedef PRL_LICENSE_RESTRICTION_KEY* PRL_LICENSE_RESTRICTION_KEY_PTR;

/**
 * Windows installation distributive type.
 */
typedef enum _PRL_GUEST_DISTRO_VERSION_ENUM
{
	PGD_UNKNOWN				= 0,
	PGD_WINDOWS_VISTA		= 1,
	PGD_WINDOWS_XP			= 2,
	PGD_WINDOWS_XP_32		= PGD_WINDOWS_XP,
	PGD_WINDOWS_XP_64		= 3,
	PGD_WINDOWS_10			= 5,

	// Deprecated types
	PGD_WINDOWS_VISTA_32	= PGD_WINDOWS_VISTA,
	PGD_WINDOWS_VISTA_64	= 4,
	PGD_WINDOWS_10_32		= PGD_WINDOWS_10,
	PGD_WINDOWS_10_64		= 6,
	PGD_WINDOWS_10_SYSPREP	= 7,
} PRL_GUEST_DISTRO_VERSION_ENUM;
typedef PRL_GUEST_DISTRO_VERSION_ENUM* PRL_GUEST_DISTRO_VERSION_ENUM_PTR;

/**
* Message type enumeration.
*/
typedef enum _PRL_MESSAGE_TYPE_ENUM
{
	PMT_WARNING			= 0,
	PMT_INFORMATION		= 1,
	PMT_CRITICAL		= 2,
	PMT_QUESTION		= 3,
	PMT_ANSWER			= 4
} PRL_MESSAGE_TYPE_ENUM;
typedef PRL_MESSAGE_TYPE_ENUM* PRL_MESSAGE_TYPE_ENUM_PTR;

/**
 * USB autoconnect devices options
 */
typedef enum _PRL_USB_DEVICE_AUTO_CONNECT_OPTION
{
	PUD_CONNECT_TO_PRIMARY_OS = 0,
	PUD_CONNECT_TO_GUEST_OS = 1,
	PUD_ASK_USER_WHAT_TODO = 2
} PRL_USB_DEVICE_AUTO_CONNECT_OPTION;
typedef PRL_USB_DEVICE_AUTO_CONNECT_OPTION* PRL_USB_DEVICE_AUTO_CONNECT_OPTION_PTR;

/**
 * USB device connect/disconnect reason
 */
typedef enum _PRL_USB_DEVICE_CONNECT_REASON
{
	PUD_CONNECTED_MANUALLY		= 0,
	PUD_CONNECTED_AUTOMATICALLY = 1
} PRL_USB_DEVICE_CONNECT_REASON;
typedef PRL_USB_DEVICE_CONNECT_REASON* PRL_USB_DEVICE_CONNECT_REASON_PTR;

/**
* USB device type
*/
typedef enum _PRL_USB_DEVICE_TYPE
{
	// Common usb device classes
	PUDT_OTHER			= 0,	// unknown device type
	PUDT_HUB			= 1,	// usb hub
	PUDT_VIDEO			= 2,	// streaming usb video device
	PUDT_FOTO			= 3,	// still image usb video device
	PUDT_AUDIO			= 4,	// usb audio device
	PUDT_PRINTER		= 5,	// usb printer
	PUDT_SCANNER		= 6,	// usb scaner
	PUDT_BLUETOOTH		= 7,	// usb bluetooth
	PUDT_WIRELESS		= 8,	// usb wireless device
	PUDT_COMMUNICATION	= 9,	// other usb communication device
	PUDT_KEYBOARD		= 10,	// usb keyboard
	PUDT_MOUSE			= 11,	// usb mouse
	PUDT_SMART_CARD		= 12,	// usb smartcard reader
	PUDT_DISK_STORAGE	= 13,	// usb storage
	PUDT_ATAPI_STORAGE	= 14,	// usb CD/DVD-ROMs
	// Some vendor specific usb device classes
	PUDT_APPLE_IPHONE	= 1000,	// apple iphone
	PUDT_APPLE_IPOD		= 1001,	// apple ipod
	PUDT_APPLE_IPAD		= 1002,	// apple ipad
	PUDT_APPLE_IETH		= 1003,	// apple ieth
	PUDT_RIM_BLACKBERRY	= 2000,	// rim blackberry
	PUDT_GARMIN_GPS		= 3000,	// garmin gps
} PRL_USB_DEVICE_TYPE;
typedef PRL_USB_DEVICE_TYPE* PRL_USB_DEVICE_TYPE_PTR;

/**
 * Parallels service statuses
 */
typedef enum _PRL_SERVICE_STATUS_ENUM
{
	PSS_STARTED = 0,
	PSS_STOPPED = 1,
	PSS_NOT_INSTALLED = 2,
	PSS_UNKNOWN
} PRL_SERVICE_STATUS_ENUM;
typedef PRL_SERVICE_STATUS_ENUM* PRL_SERVICE_STATUS_ENUM_PTR;

/**
* Running task type enumeration.
*/
typedef enum _PRL_RUNNING_TASK_TYPE_ENUM
{
	RTT_RUNNING_TASK_UNKNOWN		= 0,
	RTT_RUNNING_TASK_CREATE_VM		= 1,
	RTT_RUNNING_TASK_REGISTER_VM	= 2,
	RTT_RUNNING_TASK_CLONE_VM		= 3,
	RTT_RUNNING_TASK_DELETE_VM		= 4,
	RTT_RUNNING_TASK_UNREG_VM		= 5,
	RTT_RUNNING_TASK_CREATE_IMAGE	= 6,
	RTT_RUNNING_TASK_RESTORE_VM		= 7,
	RTT_RUNNING_TASK_MIGRATE_VM_OBSOLETE = 8,
	RTT_RUNNING_TASK_COPY_IMAGE		= 9,
} PRL_RUNNING_TASK_TYPE_ENUM;
typedef PRL_RUNNING_TASK_TYPE_ENUM* PRL_RUNNING_TASK_TYPE_ENUM_PTR;

/**
* Parallels Tools Utility commands identifiers
*/
typedef enum _PRL_TOOLS_UTILITY_COMMAND_ID
{
       ///     @brief Identifier of invalid command
       PTU_CMD_INVALID         = 0,
       ///     @brief Can be sent to indicate that Parallels Tools Utility subsystem
       ///     is alive and ready to work
       PTU_CMD_PTU_ALIVE       = 1
}
PRL_TOOLS_UTILITY_COMMAND_ID;
typedef PRL_TOOLS_UTILITY_COMMAND_ID* PRL_TOOLS_UTILITY_COMMAND_ID_PTR;

/**
* Parallels remote desktop modes
*/
typedef enum _PRL_VM_REMOTE_DISPLAY_MODE
{
	PRD_DISABLED = 0,
	PRD_AUTO,
	PRD_MANUAL
}
PRL_VM_REMOTE_DISPLAY_MODE;
typedef PRL_VM_REMOTE_DISPLAY_MODE* PRL_VM_REMOTE_DISPLAY_MODE_PTR;

/**
 * Allowed vm commands enumeration
 */
typedef enum _PRL_ALLOWED_VM_COMMAND
{
	PAR_VM_START_ACCESS									= 0,
	PAR_VM_STOP_ACCESS									= 1,
	PAR_VM_PAUSE_ACCESS									= 2,
	PAR_VM_RESET_ACCESS									= 3,
	PAR_VM_SUSPEND_ACCESS								= 4,
	PAR_VM_RESUME_ACCESS								= 5,
	PAR_VM_DROPSUSPENDEDSTATE_ACCESS					= 6,
	PAR_VM_CLONE_ACCESS									= 7,
	PAR_VM_DELETE_ACCESS								= 8,
	PAR_VM_GETPROBLEMREPORT_ACCESS						= 9,
	PAR_VM_GETCONFIG_ACCESS								= 10,
	PAR_VM_GETSTATISTICS_ACCESS							= 11,
	PAR_VM_STATISTICS_SUBSCRIPTION_ACCESS				= 12,
	PAR_VM_SUBSCRIBETOGUESTSTATISTICS_ACCESS = PAR_VM_STATISTICS_SUBSCRIPTION_ACCESS,
	PAR_VM_UNSUBSCRIBEFROMGUESTSTATISTICS_ACCESS = PAR_VM_STATISTICS_SUBSCRIPTION_ACCESS,
	PAR_VM_UNREG_ACCESS									= 13,
	PAR_VM_COMMIT_ACCESS /* look also PAR_VM_BEGINEDIT_ACCESS */	= 14,
	PAR_VM_EDITING_ACCESS /* Obsolete. To compatibility only. */ = PAR_VM_COMMIT_ACCESS,
	PAR_VMDEV_CONNECT_ACCESS							= 15,
	PAR_VMDEV_DISCONNECT_ACCESS							= 16,
	PAR_VMDEV_CREATEIMAGE_ACCESS						= 17,
	PAR_VM_SEND_ANSWER_ACCESS							= 18,
	PAR_VM_GET_VMINFO_ACCESS							= 19,
	PAR_VM_INSTALL_TOOLS_ACCESS							= 20,
	PAR_VM_INITIATE_DEV_STATE_NOTIFICATIONS_ACCESS		= 21,
	PAR_VM_UPDATE_SECURITY_ACCESS						= 22,
	PAR_VM_CANCEL_COMPACT_ACCESS						= 23,
	PAR_VM_REGISTER_ACCESS								= 24,
	PAR_VM_MIGRATE_ACCESS_OBSOLETE						= 25,
	PAR_VM_START_STOP_VNC_SERVER						= 26,
	PAR_VM_GET_SUSPENDED_SCREEN_ACCESS					= 27,
	PAR_VM_PERFSTAT_ACCESS								= 28,
	PAR_VM_LOCK_ACCESS									= 29,
	PAR_VM_MIGRATE_CANCEL_ACCESS_OBSOLETE				= PAR_VM_MIGRATE_ACCESS_OBSOLETE,
	PAR_VM_RUN_COMPRESSOR_ACCESS						= 31,
	PAR_VM_CANCEL_COMPRESSOR_ACCESS						= 32,
	PAR_VM_CREATE_SNAPSHOT_ACCESS						= 33,
	PAR_VM_SWITCH_TO_SNAPSHOT_ACCESS					= 34,
	PAR_VM_DELETE_SNAPSHOT_ACCESS						= 35,
	PAR_VM_START_EX_ACCESS								= 36,
	PAR_VM_UNLOCK_ACCESS								= 37,
	PAR_VM_RESTART_GUEST_ACCESS							= 38,
	PAR_VM_INSTALL_UTILITY_ACCESS						= 39,
	PAR_VM_UPDATE_TOOLS_SECTION							= 40,
	PAR_VM_RESTORE_ACCESS								= 41,
	PAR_VM_CREATE_BACKUP_ACCESS_OBSOLETE				= 42,
	PAR_VM_RESIZE_DISK_ACCESS					= 43,
	PAR_VM_CREATE_ACCESS							= 44,
	PAR_SRV_USER_PROFILE_BEGINEDIT_ACCESS			= 45,
	PAR_SRV_USER_PROFILE_COMMIT_ACCESS				= 46,
	PAR_SRV_SERVER_PROFILE_BEGINEDIT_ACCESS			= 47,
	PAR_SRV_SERVER_PROFILE_COMMIT_ACCESS			= 48,
	PAR_VM_GUI_VIEW_MODE_CHANGE_ACCESS				= 49,
	PAR_VM_BEGINEDIT_ACCESS /* look also PAR_VM_COMMIT_ACCESS */ = 50,
	PAR_VM_RESTORE_BACKUP_ACCESS_OBSOLETE				= 51,
	PAR_VM_COMPACT_ACCESS						= 52,
	PAR_VM_CHANGE_SID_ACCESS					= 53,
	PAR_VM_RESET_UPTIME_ACCESS					= 54,
	PAR_VM_INTERNAL_CMD_ACCESS					= 55,
	PAR_VM_GET_VIRT_DEV_INFO					= 56,
	PAR_VM_GET_TOOLS_INFO						= 57,
	PAR_VM_CONVERT_DISKS_ACCESS					= 58,
	PAR_VM_ENCRYPT_OPERATION_ACCESS				= 59,
	PAR_VM_CHANGE_PASSWORD_ACCESS					= PAR_VM_ENCRYPT_OPERATION_ACCESS,
	PAR_VM_ENCRYPT_ACCESS							= PAR_VM_ENCRYPT_OPERATION_ACCESS,
	PAR_VM_DECRYPT_ACCESS							= PAR_VM_ENCRYPT_OPERATION_ACCESS,
	PAR_VM_SET_PROTECTION_ACCESS					= PAR_VM_ENCRYPT_OPERATION_ACCESS,
	PAR_VM_REMOVE_PROTECTION_ACCESS					= PAR_VM_ENCRYPT_OPERATION_ACCESS,
	PAR_VM_AUTHORISE_ACCESS						= 60,
	PAR_VMDEV_COPY_IMAGE_ACCESS					= 61,
	PAR_VM_MOUNT_ACCESS_OBSOLETE			= 62,
	PAR_VM_MOVE_ACCESS						= 63,
	PAR_VM_CHANGE_GUEST_OS_PASSWORD_ACCESS	= 64,
	PAR_SRV_SENDPROBLEMREPORT_ACCESS		= 65,
	PAR_BACKUP_BEGIN						= 66,
	PAR_BACKUP_COMMIT						= 67,
	PAR_BACKUP_ROLLBACK						= 68,
	PAR_VM_ARCHIVE_ACCESS = 69,
	PAR_VM_UNARCHIVE_ACCESS = 70,
	PAR_VM_PACK_ACCESS = 71,
	PAR_VM_UNPACK_ACCESS = 72,
	PAR_VM_GET_NETWORK_SETTINGS				= 73,
	PAR_VM_GET_TOTAL_SNAPSHOTS_SIZE			= 74,

	PAR_MAX, // should be the last
} PRL_ALLOWED_VM_COMMAND;
typedef PRL_ALLOWED_VM_COMMAND* PRL_ALLOWED_VM_COMMAND_PTR;

/* Specifies virtual machine access rights.
   Type Parameters
   PAO_VM_NOT_SHARED :              Only the owner of the virtual
                                    machine has access to it. The
                                    machine will be hidden from
                                    all other users.
   PAO_VM_SHARED_ON_VIEW :          Other users can see the
                                    machine but they cannot run
                                    it. Other access rights can
                                    be determined using methods
                                    from the PHT_ACCESS_RIGHTS
                                    object.
   PAO_VM_SHARED_ON_VIEW_AND_RUN :  Other users can see the
                                    machine and they can also run
                                    it. Other access rights can
                                    be determined using methods
                                    from the PHT_ACCESS_RIGHTS
                                    object.
   PAO_VM_SHARED_ON_FULL_ACCESS :   Other users have full access
                                    to the virtual machine.       */
typedef enum _PRL_VM_ACCESS_FOR_OTHERS
{
	PAO_VM_NOT_SHARED = 0,
	PAO_VM_SHARED_ON_VIEW,
	PAO_VM_SHARED_ON_VIEW_AND_RUN,
	PAO_VM_SHARED_ON_FULL_ACCESS
} PRL_VM_ACCESS_FOR_OTHERS;
typedef PRL_VM_ACCESS_FOR_OTHERS* PRL_VM_ACCESS_FOR_OTHERS_PTR;

/**
 * Graceful Shutdown types
 */
typedef enum _PRL_GRACEFUL_SHUTDOWN_KIND
{
	PST_VM_SHUTDOWN = 0,
	PST_VM_REBOOT = 1,
	PST_VM_HIBERNATE = 2,
	PST_VM_SUSPEND = 3, 
	PST_VM_LOGOUT = 4
} PRL_GRACEFUL_SHUTDOWN_KIND;
typedef PRL_GRACEFUL_SHUTDOWN_KIND* PRL_GRACEFUL_SHUTDOWN_KIND_PTR;

typedef enum _PRL_GRACEFUL_SHUTDOWN_CAPABILITIES
{
	PGST_CAPABILITY_SHUTDOWN		= 0x1,
	PGST_CAPABILITY_REBOOT			= 0x2,
	PGST_CAPABILITY_SUSPEND			= 0x4,
	PGST_CAPABILITY_HIBERNATE		= 0x8,
	PGST_CAPABILITY_LOGOUT			= 0x10 // for current guest user
} PRL_GRACEFUL_SHUTDOWN_CAPABILITIES;
typedef PRL_GRACEFUL_SHUTDOWN_CAPABILITIES*	PRL_GRACEFUL_SHUTDOWN_CAPABILITIES_PTR;

/**
 * VM configuration sections
 */
typedef enum _PRL_VM_CONFIG_SECTIONS
{
	PVC_VALIDATE_CHANGES_ONLY = 0,
	PVC_ALL = 1,
	PVC_GENERAL_PARAMETERS = 2,
	PVC_BOOT_OPTION = 3,
	PVC_REMOTE_DISPLAY = 4,
	PVC_SHARED_FOLDERS = 5,
	PVC_CPU = 6,
	PVC_MAIN_MEMORY = 7,
	PVC_VIDEO_MEMORY = 8,
	PVC_FLOPPY_DISK = 9,
	PVC_CD_DVD_ROM = 10,
	PVC_HARD_DISK = 11,
	PVC_NETWORK_ADAPTER = 12,
	PVC_SOUND = 13,
	PVC_SERIAL_PORT = 14,
	PVC_PARALLEL_PORT = 15,
	PVC_IDE_DEVICES = 16,
	PVC_SCSI_DEVICES = 17,
	PVC_GENERIC_PCI = 18,
	PVC_OFFLINE_MANAGEMENT_SETTINGS_OBSOLETE = 19,
	PVC_LICENSE_RESTRICTIONS = 20,
	PVC_SATA_DEVICES = 21,
	PVC_NVME_DEVICES = 22,
	PVC_TPM = 23,
	PVC_UFS_DEVICES = 24,
	PVC_CHIPSET = 25,
	PVC_LAST_SECTION = PVC_CHIPSET
} PRL_VM_CONFIG_SECTIONS;
typedef PRL_VM_CONFIG_SECTIONS* PRL_VM_CONFIG_SECTIONS_PTR;

/**
 * Parallels Tools Information Service record states
 */
typedef enum _PRL_TIS_RECORD_STATE
{
	PTIS_RECORD_EMPTY		= 0,
	PTIS_RECORD_ACTIVE		= 1,
	PTIS_RECORD_CANCELED	= 2
}
PRL_TIS_RECORD_STATE;
typedef PRL_TIS_RECORD_STATE* PRL_TIS_RECORD_STATE_PTR;

/**
 * Parallels Tools Information Service record fields
 */
typedef enum _PRL_TIS_RECORD_FIELD
{
	PTIS_RECORD_UID			= 1 << 0,
	PTIS_RECORD_NAME		= 1 << 1,
	PTIS_RECORD_INFO		= 1 << 2,
	PTIS_RECORD_TEXT		= 1 << 3,
	PTIS_RECORD_DATA		= 1 << 4,
	PTIS_RECORD_STATE		= 1 << 5,
	PTIS_RECORD_TIME		= 1 << 6,
	PTIS_RECORD_OWNER		= 1 << 7,
	PTIS_RECORD_FLAGS		= 1 << 8,
	PTIS_RECORD_REMOVED		= 1 << 30, // set when record removed
	PTIS_RECORD_CLEARED		= 1 << 31, // set only with PTIS_RECORD_REMOVED bit
									   // when entire database was cleared
}
PRL_TIS_RECORD_FIELD;
typedef PRL_TIS_RECORD_FIELD* PRL_TIS_RECORD_FIELD_PTR;

/**
 * Job operation codes
 */
typedef enum _PRL_JOB_OPERATION_CODE
{
	PJOC_UNKNOWN									= 0,
	PJOC_JOB_CANCEL									= 1,
	PJOC_SRV_LOOKUP_PARALLELS_SERVERS				= 2,
	PJOC_SRV_LOGIN									= 3,
	PJOC_SRV_LOGIN_LOCAL							= 4,
	PJOC_SRV_LOGOFF									= 5,
	PJOC_SRV_GET_SRV_CONFIG							= 6,
	PJOC_SRV_GET_COMMON_PREFS						= 7,
	PJOC_SRV_COMMON_PREFS_BEGIN_EDIT				= 8,
	PJOC_SRV_COMMON_PREFS_COMMIT					= 9,
	PJOC_SRV_GET_USER_PROFILE						= 10,
	PJOC_SRV_GET_STATISTICS							= 11,
	PJOC_SRV_USER_PROFILE_BEGIN_EDIT				= 12,
	PJOC_SRV_USER_PROFILE_COMMIT					= 13,
	PJOC_SRV_REGISTER_VM							= 14,
	PJOC_SRV_REGISTER_VM_EX							= PJOC_SRV_REGISTER_VM,
	PJOC_SRV_GET_VM_LIST							= 15,
	PJOC_SRV_SUBSCRIBE_TO_HOST_STATISTICS			= 16,
	PJOC_SRV_UNSUBSCRIBE_FROM_HOST_STATISTICS		= 17,
	PJOC_SRV_SHUTDOWN								= 18,
	PJOC_SRV_FS_GET_DISK_LIST						= 19,
	PJOC_SRV_FS_GET_DIR_ENTRIES						= 20,
	PJOC_SRV_FS_CREATE_DIR							= 21,
	PJOC_SRV_FS_REMOVE_ENTRY						= 22,
	PJOC_SRV_FS_CAN_CREATE_FILE						= 23,
	PJOC_SRV_FS_RENAME_ENTRY						= 24,
	PJOC_SRV_FS_GENERATE_ENTRY_NAME					= 25,
	PJOC_SRV_UPDATE_LICENSE							= 26,
	PJOC_SRV_GET_LICENSE_INFO						= 27,
	PJOC_SRV_SEND_ANSWER							= 28,
	PJOC_SRV_START_SEARCH_VMS						= 29,
	PJOC_SRV_NET_SERVICE_START						= 30,
	PJOC_SRV_NET_SERVICE_STOP						= 31,
	PJOC_SRV_NET_SERVICE_RESTART					= 32,
	PJOC_SRV_NET_SERVICE_RESTORE_DEFAULTS			= 33,
	PJOC_SRV_GET_NET_SERVICE_STATUS					= 34,
	PJOC_SRV_ADD_NET_ADAPTER_OBSOLETE				= 35,
	PJOC_SRV_DELETE_NET_ADAPTER_OBSOLETE			= 36,
	PJOC_SRV_UPDATE_NET_ADAPTER_OBSOLETE			= 37,
	PJOC_SRV_GET_PROBLEM_REPORT						= 38,
	PJOC_SRV_ATTACH_TO_LOST_TASK					= 39,
	PJOC_SRV_GET_USER_INFO_LIST						= 40,
	PJOC_SRV_GET_USER_INFO							= 41,
	PJOC_VM_START									= 42,
	PJOC_VM_STOP									= 43,
	PJOC_VM_PAUSE									= 44,
	PJOC_VM_RESET									= 45,
	PJOC_VM_SUSPEND									= 46,
	PJOC_VM_RESUME									= PJOC_VM_START,
	PJOC_VM_DROP_SUSPENDED_STATE					= 49,
	PJOC_VM_CLONE									= 50,
	PJOC_VM_DELETE									= 51,
	PJOC_VM_GET_PROBLEM_REPORT						= 52,
	PJOC_VM_GET_STATE								= 53,
	PJOC_VM_GENERATE_VM_DEV_FILENAME				= 54,
	PJOC_VM_GET_TOOLS_STATE							= 55,
	PJOC_VM_REFRESH_CONFIG							= 56,
	PJOC_VM_GET_STATISTICS							= 57,
	PJOC_VM_SUBSCRIBE_TO_GUEST_STATISTICS			= 58,
	PJOC_VM_UNSUBSCRIBE_FROM_GUEST_STATISTICS		= 59,
	PJOC_VM_REG										= 60,
	PJOC_VM_UNREG									= 61,
	PJOC_VM_BEGIN_EDIT								= 62,
	PJOC_VM_COMMIT									= 63,
	PJOC_VM_CREATE_UNATTENDED_FLOPPY				= 64,
	PJOC_VM_CREATE_UNATTENDED_DISK					= PJOC_VM_CREATE_UNATTENDED_FLOPPY,
	PJOC_VM_INITIATE_DEV_STATE_NOTIFICATIONS		= 65,
	PJOC_VM_UPDATE_SECURITY							= 66,
	PJOC_VM_VALIDATE_CONFIG							= 67,
	PJOC_VM_DEV_CONNECT								= 68,
	PJOC_VM_DEV_DISCONNECT							= 69,
	PJOC_VM_DEV_CREATE_IMAGE						= 70,
	PJOC_VM_INSTALL_TOOLS							= 71,
	PJOC_VM_SEND_SHUTDOWN_COMMAND					= 72,
	PJOC_VM_SEND_CLIPBOARD_REQUEST					= 73,
	PJOC_VM_CONNECT_TO_VM							= 74,
	PJOC_VM_DEV_DISPLAY_CAPTURE_SCREEN				= 75,
	PJOC_VM_MIGRATE_OBSOLETE						= 76,
	PJOC_VM_SEND_DRAGDROP_COMMAND					= 77,
	PJOC_VM_GUEST_RUN_PROGRAM						= 78,
	PJOC_VM_GUEST_LOGOUT							= 79,
	PJOC_SRV_SUBSCRIBE_PERFSTATS					= 80,
	PJOC_SRV_UNSUBSCRIBE_PERFSTATS					= 81,
	PJOC_SRV_GET_PERFSTATS							= 82,
	PJOC_VM_SUBSCRIBE_PERFSTATS						= 83,
	PJOC_VM_UNSUBSCRIBE_PERFSTATS					= 84,
	PJOC_VM_GET_PERFSTATS							= 85,
	PJOC_VM_GET_SUSPENDED_SCREEN					= 86,
	PJOC_VM_MIGRATE_CANCEL_OBSOLETE					= 87,
	PJOC_VM_RUN_COMPRESSOR							= 88,
	PJOC_VM_CANCEL_COMPRESSOR						= 89,
	PJOC_VM_CREATE_SNAPSHOT							= 90,
	PJOC_VM_SWITCH_TO_SNAPSHOT						= 91,
	PJOC_VM_DELETE_SNAPSHOT							= 92,
	PJOC_VM_GET_SNAPSHOTS_TREE						= 93,
	PJOC_VM_START_EX								= 94,
	PJOC_VM_LOGIN_IN_GUEST							= 95,
	PJOC_VM_UPDATE_SNAPSHOT_DATA					= 96,
	PJOC_VM_RESTART									= 97,
	PJOC_VM_INSTALL_UTILITY							= 98,
	PJOC_VM_UPDATE_TOOLS_SECTION					= 99,
	PJOC_SRV_GET_ALL_HOST_USERS						= 100,
	PJOC_VM_RESTORE									= 101,
	PJOC_VM_START_VNC_SERVER						= 102,
	PJOC_VM_STOP_VNC_SERVER							= 103,
	PJOC_VM_GUEST_GET_NETWORK_SETTINGS				= 104,
	PJOC_SRV_GET_VIRTUAL_NETWORK_LIST				= 105,
	PJOC_VM_AUTH_WITH_GUEST_SECURITY_DB				= 106,
	PJOC_VM_GUEST_SET_USER_PASSWD					= 107,
	PJOC_SRV_ADD_VIRTUAL_NETWORK					= 108,
	PJOC_SRV_UPDATE_VIRTUAL_NETWORK					= 109,
	PJOC_SRV_DELETE_VIRTUAL_NETWORK					= 110,
	PJOC_SRV_CONFIGURE_GENERIC_PCI					= 111,
	PJOC_SRV_PREPARE_FOR_HIBERNATE					= 112,
	PJOC_SRV_AFTER_HOST_RESUME						= 113,
	PJOC_SRV_GET_BACKUP_TREE_OBSOLETE				= 114,
	PJOC_SRV_CREATE_VM_BACKUP_OBSOLETE				= 115,
	PJOC_SRV_RESTORE_VM_BACKUP_OBSOLETE				= 116,
	PJOC_API_SEND_PROBLEM_REPORT					= 117,
	PJOC_VM_LOCK									= 118,
	PJOC_VM_UNLOCK									= 119,
	PJOC_SRV_SET_NON_INTERACTIVE_SESSION			= 120,
	PJOC_SRV_CREATE_UNATTENDED_CD					= 121,
	PJOC_SRV_REMOVE_VM_BACKUP_OBSOLETE				= 122,
	PJOC_VM_RESIZE_DISK_IMAGE						= 123,
	PJOC_SRV_SET_SESSION_CONFIRMATION_MODE			= 124,
	PJOC_SRV_STORE_VALUE_BY_KEY						= 125,
	PJOC_VM_STORE_VALUE_BY_KEY						= 126,
	PJOC_VM_COMPACT									= 127,
	PJOC_VM_CANCEL_COMPACT							= 128,
	PJOC_SRV_SEND_CLIENT_STATISTICS					= 129,
	PJOC_VM_GET_PACKED_PROBLEM_REPORT				= 130,
	PJOC_SRV_GET_PACKED_PROBLEM_REPORT				= 131,
	PJOC_API_SEND_PACKED_PROBLEM_REPORT				= 132,
	PJOC_SRV_UPDATE_USB_ASSOC_LIST					= 133,
	PJOC_SRV_REGISTER_3RD_PARTY_VM					= 134,
	PJOC_VM_CHANGE_SID								= 135,
	PJOC_VM_RESET_UPTIME							= 136,
	PJOC_REPORT_ASSEMBLY							= 137,
	PJOC_SRV_INSTALL_APPLIANCE						= 138,
	PJOC_SRV_UPDATE_OFFLINE_SERVICE_OBSOLETE		= 139,
	PJOC_SRV_DELETE_OFFLINE_SERVICE_OBSOLETE		= 140,
	PJOC_SRV_GET_OFFLINE_SERVICES_LIST_OBSOLETE		= 141,
	PJOC_SRV_START_CLUSTER_SERVICE_OBSOLETE			= 142,
	PJOC_SRV_STOP_CLUSTER_SERVICE_OBSOLETE			= 143,
	PJOC_VM_CMD_INTERNAL							= 144,
	PJOC_VM_GET_VIRTUAL_DEVICES_INFO				= 145,
	PJOC_VM_CONVERT_DISKS							= 146,
	PJOC_VM_DEV_HD_CHECK_PASSWORD					= 147,
	PJOC_VM_AUTHORISE								= 148,
	PJOC_VM_CHANGE_PASSWORD							= 149,
	PJOC_VM_ENCRYPT									= 150,
	PJOC_VM_DECRYPT									= 151,
	PJOC_SRV_UPDATE_NETWORK_CLASSES_CONFIG_OBSOLETE	= 152,
	PJOC_SRV_GET_NETWORK_CLASSES_LIST_OBSOLETE		= 153,
	PJOC_SRV_UPDATE_NETWORK_SHAPING_CONFIG_OBSOLETE	= 154,
	PJOC_SRV_GET_NETWORK_SHAPING_CONFIG_OBSOLETE	= 155,
	PJOC_SRV_RESTART_NETWORK_SHAPING_OBSOLETE		= 156,
	PJOC_SRV_PROXY_GET_REGISTERED_HOSTS				= 157,
	PJOC_SRV_REGISTER_ISCSI_STORAGE					= 158,
	PJOC_SRV_UNREGISTER_ISCSI_STORAGE				= 159,
	PJOC_SRV_EXTEND_ISCSI_STORAGE					= 160,
	PJOC_SRV_GET_CT_TEMPLATE_LIST_OBSOLETE			= 161,
	PJOC_SRV_CHECK_ALIVE							= 162,
	PJOC_SRV_GET_DEFAULT_VM_CONFIG_OBSOLETE			= 163,
	PJOC_SRV_REMOVE_CT_TEMPLATE_OBSOLETE			= 164,
	PJOC_SRV_COPY_CT_TEMPLATE_OBSOLETE				= 165,
	PJOC_SRV_ADD_IPPRIVATE_NETWORK_OBSOLETE			= 166,
	PJOC_SRV_REMOVE_IPPRIVATE_NETWORK_OBSOLETE		= 167,
	PJOC_SRV_UPDATE_IPPRIVATE_NETWORK_OBSOLETE		= 168,
	PJOC_SRV_GET_IPPRIVATE_NETWORKS_LIST_OBSOLETE	= 169,
	PJOC_VM_DEV_COPY_IMAGE							= 170,
	PJOC_SRV_REFRESH_PLUGINS						= 171,
	PJOC_VM_MOUNT_OBSOLETE							= 172,
	PJOC_VM_UMOUNT_OBSOLETE							= 173,
	PJOC_SRV_GET_PLUGINS_LIST						= 174,
	PJOC_SRV_GET_DISK_FREE_SPACE					= 175,
	PJOC_DESKTOP_CONTROL_CONNECT					= 176,
	PJOC_VM_MOVE									= 177,
	PJOC_SRV_GENERATE_CSR							= 178,
	PJOC_SRV_SIGN_CERTIFICATION_REQUEST				= 179,
	PJOC_SRV_GET_VM_CONFIG							= 180,
	PJOC_PTM_RPC									= 181,
	PJOC_API_PUT_USER_DATA							= 182,
	PJOC_API_GET_USER_DATA							= 183,
	PJOC_API_GET_USER_KEYS							= 184,
	PJOC_API_REMOVE_USER_DATA						= 185,
	PJOC_API_PUT_ICON								= 186,
	PJOC_API_VALIDATE_IN_CACHE						= 187,
	PJOC_SRV_UPDATE_SESSION_INFO					= 188,
	PJOC_API_SUBSCRIBE_ON_REGISTRATION				= 189,
    PJOC_SRV_SEND_PROBLEM_REPORT                    = 190,
    PJOC_VM_SEND_PROBLEM_REPORT                     = 191,
	PJOC_VM_SET_PROTECTION							= 192,
	PJOC_VM_REMOVE_PROTECTION						= 193,
	PJOC_SRV_ADD_SHARED_ITEM						= 194,
	PJOC_SRV_UPDATE_SHARED_ITEM						= 195,
	PJOC_SRV_REMOVE_SHARED_ITEM						= 196,
	PJOC_SRV_GET_SHARED_ITEM_LIST					= 197,
	PJOC_SRV_SWITCH_FILE_SHARING_NOTIFICATIONS		= 198,
	PJOC_SRV_REFRESH_SERVER_INFO					= 199,
	PJOC_BACKUP_BEGIN								= 200,
	PJOC_BACKUP_COMMIT								= 201,
	PJOC_BACKUP_ROLLBACK							= 202,
	PJOC_GET_BACKUP_VIRTUAL_MACHINES				= 203,
	PJOC_VM_ARCHIVE							= 204,
	PJOC_VM_UNARCHIVE						= 205,
	PJOC_BACKUP_SEND_PROGRESS				= 206,
	PJOC_SRV_RESPAWN_DESKCTL_AGENT			= 207,
	PJOC_VM_PACK							= 208,
	PJOC_VM_UNPACK							= 209,
	PJOC_VM_GET_NETWORK_SETTINGS					= 210,
	PJOC_SRV_ESTIMATE_CONVERT_THIRD_PARTY_VM		= 211,
	PJOC_SRV_CONVERT_THIRD_PARTY_VM					= 212,
	PJOC_VM_GET_TOTAL_SNAPSHOTS_SIZE				= 213
}

PRL_JOB_OPERATION_CODE;
typedef PRL_JOB_OPERATION_CODE* PRL_JOB_OPERATION_CODE_PTR;

/**
 * Obsolete enum.
 * Use display encodings at runtime for connection with new server
 * Note: #PrlSrv_GetDisplayEncodingList
 * Display codec quality.
 */
typedef enum _PRL_DISPLAY_CODEC_QUALITY
{
	PDCQ_HIGH_QUALITY   = 1<<0,
	PDCQ_MEDIUM_QUALITY = 1<<1,
	PDCQ_LOW_QUALITY    = 1<<2
}
PRL_DISPLAY_CODEC_QUALITY;

/**
 * Obsolete enum.
 * Use display encodings at runtime for connection with new server
 * Note: #PrlSrv_GetDisplayEncodingList
 * Display codec compression
 */
typedef enum _PRL_DISPLAY_CODEC_COMPRESSION
{
	PDCC_HIGH_COMPRESSION   = 1<<15,
	PDCC_MEDIUM_COMPRESSION = 1<<16,
	PDCC_LOW_COMPRESSION    = 1<<17,
	PDCC_NO_COMPRESSION     = 1<<18,
}
PRL_DISPLAY_CODEC_COMPRESSION;

/**
 * Obsolete enum.
 * Use display encodings at runtime for connection with new server
 * Note: #PrlSrv_GetDisplayEncodingList
 * Display codec types
 */
typedef enum _PRL_DISPLAY_CODEC_TYPE
{
	PDCT_HIGH_QUALITY_WITHOUT_COMPRESSION    = PDCQ_HIGH_QUALITY |
	                                           PDCC_NO_COMPRESSION,
	PDCT_HIGH_QUALITY_WITH_COMPRESSION       = PDCQ_HIGH_QUALITY |
	                                           PDCC_MEDIUM_COMPRESSION,
	PDCT_MEDIUM_QUALITY_WITHOUT_COMPRESSION  = PDCQ_MEDIUM_QUALITY |
	                                           PDCC_NO_COMPRESSION,
	PDCT_MEDIUM_QUALITY_WITH_COMPRESSION     = PDCQ_MEDIUM_QUALITY |
	                                           PDCC_MEDIUM_COMPRESSION,
	PDCT_LOW_QUALITY_WITHOUT_COMPRESSION     = PDCQ_LOW_QUALITY |
	                                           PDCC_NO_COMPRESSION,
	PDCT_LOW_QUALITY_WITH_COMPRESSION        = PDCQ_LOW_QUALITY |
	                                           PDCC_MEDIUM_COMPRESSION,
}
PRL_DISPLAY_CODEC_TYPE;

/**
 * Format of display buffer
 */
typedef enum _PRL_DISPLAY_BUFFER_FORMAT
{
	PDBF_NO_CONVERSION = 0,
	PDBF_INDEX8        = 1,
	PDBF_RGB15         = 2,
	PDBF_RGB16         = 3,
	PDBF_RGB24         = 4,
	PDBF_BGR32         = 5,
	PDBF_RGB32         = 6,
	PDBF_YUV422x8      = 10,
	PDBF_YUV422x6      = 11,
	PDBF_YUV422x4      = 12,
	PDBF_YUV420        = 16,
}
PRL_DISPLAY_BUFFER_FORMAT;
typedef PRL_DISPLAY_BUFFER_FORMAT* PRL_DISPLAY_BUFFER_FORMAT_PTR;

#define PVM_GET_SECURITY_LEVEL(flags) \
	(PRL_SECURITY_LEVEL)((flags) & (PSL_LOW_SECURITY|PSL_NORMAL_SECURITY|PSL_HIGH_SECURITY))

/* Shared Internet Applications 'open in' type
   PSIA_OPEN_DEFAULT :       Open host link with host app; Open guest link with guest app
   PSIA_OPEN_IN_GUEST :      Open all links with guest apps;
   PSIA_OPEN_IN_HOST :       Open all links with host apps;
*/
typedef enum _PRL_TOOLS_SIA_OPEN_IN_TYPES
{
	PSIA_OPEN_DEFAULT	    = 0,
	PSIA_OPEN_IN_GUEST	    = 1,
	PSIA_OPEN_IN_HOST	    = 2
} PRL_TOOLS_SIA_OPEN_IN_TYPES;
typedef PRL_TOOLS_SIA_OPEN_IN_TYPES* PRL_TOOLS_SIA_OPEN_IN_TYPES_PTR;

/* Parallels application mode in which SDK should work
   PAM_DESKTOP_MAC :  SDK should working at Parallels Desktop for Mac application mode
   PAM_MOBILE : SDK should work at Parallels Mobile application mode
*/
typedef enum _PRL_APPLICATION_MODE
{
	PAM_UNKNOWN	    = 0xffff,
	PAM_DESKTOP		= 1,
	PAM_DESKTOP_MAC	= PAM_DESKTOP,
	PAM_DESKTOP_STM	= PAM_DESKTOP_MAC,
	PAM_MOBILE      = 6,

	PAM_LAST = PAM_MOBILE, /* PAM_LAST should be always last entry in enum !*/

/*  OBSOLETE CONSTANTS (for compatibility only) */
	PAM_SERVER_OBSOLETE = 0,
	PAM_WORKSTATION_EXTREME_OBSOLETE = 2,
	PAM_PLAYER_OBSOLETE = 3,
	PAM_DESKTOP_STM_OBSOLETE = 4,
	PAM_DESKTOP_WL_OBSOLETE = 5,
	PAM_WORKSTATION_OBSOLETE = PAM_WORKSTATION_EXTREME_OBSOLETE,
	PAM_STM			= PAM_DESKTOP_STM_OBSOLETE,

} PRL_APPLICATION_MODE;
typedef PRL_APPLICATION_MODE* PRL_APPLICATION_MODE_PTR;

/* VM undo disks mode:
    PUD_DISABLE_UNDO_DISKS : disbale undo disks
    PUD_REVERSE_CHANGES    : at stopping VM revert all disk changes
    PUD_COMMIT_CHANGES     : at stopping VM apply all disk changes
    PUD_PROMPT_BEHAVIOUR   : ask user which mode reverse or commit will be applied
*/
typedef enum _PRL_UNDO_DISKS_MODE
{
	PUD_DISABLE_UNDO_DISKS	= 0,
	PUD_REVERSE_CHANGES		= 1,
	PUD_COMMIT_CHANGES		= 2,
	PUD_PROMPT_BEHAVIOUR	= 3
} PRL_UNDO_DISKS_MODE;
typedef PRL_UNDO_DISKS_MODE* PRL_UNDO_DISKS_MODE_PTR;

/*
	Edges where taskbar can be placed (in coherence mode).
*/
typedef enum _PRL_WINDOW_EDGE_MASK
{
	WINDOW_LEFT_EDGE_MASK = (0x1L << 0),
	WINDOW_TOP_EDGE_MASK = (0x1L << 1),
	WINDOW_RIGHT_EDGE_MASK = (0x1L << 2),
	WINDOW_BOTTOM_EDGE_MASK = (0x1L << 3),
	WINDOW_ALL_EDGE_MASK =
		WINDOW_LEFT_EDGE_MASK | WINDOW_TOP_EDGE_MASK | WINDOW_RIGHT_EDGE_MASK | WINDOW_BOTTOM_EDGE_MASK
} PRL_WINDOW_EDGE_MASK;
typedef PRL_WINDOW_EDGE_MASK * PRL_WINDOW_EDGE_MASK_PTR;

// Guest OS sessions types and constants declarations
#define PRL_PRIVILEGED_GUEST_OS_SESSION "531582ac-3dce-446f-8c26-dd7e3384dcf4"
#define PRL_CURRENT_GUEST_OS_SESSION	"4a5533a7-31c6-4d7a-a400-1f330dc57a9d"

/* Port forwarding type:
    PPF_TCP : TCP port forwarding
	PPF_UDP : UDP port forwarding
*/
typedef enum _PRL_PORT_FORWARDING_TYPE
{
	PPF_TCP		= 0,
	PPF_UDP		= 1
} PRL_PORT_FORWARDING_TYPE;
typedef PRL_PORT_FORWARDING_TYPE* PRL_PORT_FORWARDING_TYPE_PTR;

/* Generic PCI device class:
   PGD_PCI_NETWORK : generic PCI network device
   PGD_PCI_DISPLAY : generic PCI display device
   PGD_PCI_SOUND   : generic PCI sound device
   PGD_PCI_OTHER   : another generic PCI device
*/
typedef enum _PRL_GENERIC_PCI_DEVICE_CLASS
{
	PGD_PCI_NETWORK		= 0,
	PGD_PCI_DISPLAY		= 1,
	PGD_PCI_SOUND		= 2,
	PGD_PCI_OTHER		= 3
} PRL_GENERIC_PCI_DEVICE_CLASS;
typedef PRL_GENERIC_PCI_DEVICE_CLASS* PRL_GENERIC_PCI_DEVICE_CLASS_PTR;

/*
 * Generic device state
 * PGS_CONNECTED_TO_HOST  : device is used by host
 * PGS_CONNECTED_TO_VM    : device is used by VM
 * PGS_RESERVED           : reserved value
 * PGS_NON_CONTROLLED_USB : USB device is not controlled
 * PGS_CONNECTING_TO_VM	  : device belong to VM, but prl_usb_dev still not started
 */
typedef enum _PRL_GENERIC_DEVICE_STATE
{
	PGS_CONNECTED_TO_HOST	= 0,
	PGS_CONNECTED_TO_VM		= 1,
	PGS_RESERVED			= 2,
	PGS_NON_CONTROLLED_USB	= PGS_RESERVED,
	PGS_CONNECTING_TO_VM	= 3
} PRL_GENERIC_DEVICE_STATE;
typedef PRL_GENERIC_DEVICE_STATE* PRL_GENERIC_DEVICE_STATE_PTR;

/*
 * Parallels adapter index reserved values:
 * PAI_INVALID_ADAPTER:  parallels adapter in general is not available
 * PAI_GENERATE_INDEX:   calculate a new parallels adapter index
 */
typedef enum _PRL_ADAPTER_INDEX
{
	PAI_INVALID_ADAPTER	= -1,
	PAI_GENERATE_INDEX	= -2,
} PRL_ADAPTER_INDEX;

/*
 * VM files location set
 * PVL_UNKNOWN            : VM files location unknown (mostly for invalid VMs)
 * PVL_LOCAL_FS           : VM files placed on local file system
 * PVL_REMOTE_FS          : VM files placed on remote file system
 * PVL_USB_DRIVE          : VM files placed on external USB drive
 * PVL_FIREWIRE_DRIVE     : VM files placed on external FireWire drive
 */
typedef enum _PRL_VM_LOCATION
{
	PVL_UNKNOWN          = 0,
	PVL_LOCAL_FS         = 1,
	PVL_REMOTE_FS        = 2,
	PVL_USB_DRIVE        = 3,
	PVL_FIREWIRE_DRIVE   = 4
} PRL_VM_LOCATION;
typedef PRL_VM_LOCATION* PRL_VM_LOCATION_PTR;

/*
 * VM colors
 */
typedef enum _PRL_VM_COLOR
{
	PVC_COLOR_RED = 0x00FA645A,
	PVC_COLOR_ORANGE = 0x00F6AA44,
	PVC_COLOR_YELLOW = 0x00EFDB47,
	PVC_COLOR_GREEN = 0x00B4D747,
	PVC_COLOR_BLUE = 0x005AA3FF,
	PVC_COLOR_PURPLE = 0x00C08ED8,
	PVC_COLOR_GREY = 0x00808080,
	PVC_NO_COLOR = 0x00000000
} PRL_VM_COLOR;
typedef PRL_VM_COLOR* PRL_VM_COLOR_PTR;

/*
 * Hard disk interfce mask enum
 */
typedef enum _PRL_HARD_DISK_IFACE_MASK
{
	PIM_IDE_0_0		= (0x1L<<0),
	PIM_IDE_0_1		= (0x1L<<1),
	PIM_IDE_1_0		= (0x1L<<2),
	PIM_IDE_1_1		= (0x1L<<3),
	PIM_SCSI_0_0	= (0x1L<<4),
	PIM_SCSI_1_0	= (0x1L<<5),
	PIM_SCSI_2_0	= (0x1L<<6),
	PIM_SCSI_3_0	= (0x1L<<7),
	PIM_SCSI_4_0	= (0x1L<<8),
	PIM_SCSI_5_0	= (0x1L<<9),
	PIM_SCSI_6_0	= (0x1L<<10),
	PIM_SCSI_7_0	= (0x1L<<11),
	PIM_SCSI_8_0	= (0x1L<<12),
	PIM_SCSI_9_0	= (0x1L<<13),
	PIM_SCSI_10_0	= (0x1L<<14),
	PIM_SCSI_11_0	= (0x1L<<15),
	PIM_SCSI_12_0	= (0x1L<<16),
	PIM_SCSI_13_0	= (0x1L<<17),
	PIM_SCSI_14_0	= (0x1L<<18),
	PIM_SCSI_15_0	= (0x1L<<19),
	PIM_SATA_0_0	= (0x1L<<20),
	PIM_SATA_0_1	= (0x1L<<21),
	PIM_SATA_0_2	= (0x1L<<22),
	PIM_SATA_0_3	= (0x1L<<23),
	PIM_SATA_0_4	= (0x1L<<24),
	PIM_SATA_0_5	= (0x1L<<25),
	PIM_NVME_0_0	= (0x1L<<26),
	PIM_NVME_0_1	= (0x1L<<27),
	PIM_NVME_0_2	= (0x1L<<28),
	PIM_ALL_DISKS			= ((0x1L<<29) - 1),
	PIM_COMPACT_DELAYED		= (0x1L<<31),
	PIM_IDE_MASK_OFFSET		= PIM_IDE_0_0,
	PIM_SCSI_MASK_OFFSET	= PIM_SCSI_0_0,
	PIM_SATA_MASK_OFFSET	= PIM_SATA_0_0,
	PIM_NVME_MASK_OFFSET	= PIM_NVME_0_0,
} PRL_HARD_DISK_IFACE_MASK;
typedef PRL_HARD_DISK_IFACE_MASK* PRL_HARD_DISK_IFACE_MASK_PTR;

/**
 * Problem report scheme enumaration
 */
typedef enum _PRL_PROBLEM_REPORT_SCHEME
{
	PRS_OLD_XML_BASED	= 0, // Deprecated
	PRS_NEW_PACKED		= 1,
} PRL_PROBLEM_REPORT_SCHEME;
typedef PRL_PROBLEM_REPORT_SCHEME* PRL_PROBLEM_REPORT_SCHEME_PTR;

/**
 * Problem report type enumeration
 */
typedef enum _PRL_PROBLEM_REPORT_TYPE
{
	PRT_REPORT_TYPE_UNDEFINED						= 0,
	PRT_AUTOMATIC_VM_GENERATED_REPORT				= 1,
	PRT_AUTOMATIC_DISPATCHER_GENERATED_REPORT		= 2,
	PRT_USER_DEFINED_ON_STOPPED_VM_REPORT			= 3,
	PRT_USER_DEFINED_ON_RUNNING_VM_REPORT			= 4,
	PRT_USER_DEFINED_ON_CONNECTED_SERVER			= 5,
	PRT_USER_DEFINED_ON_DISCONNECTED_SERVER			= 6,
	PRT_USER_DEFINED_ON_NOT_RESPONDING_VM_REPORT	= 7,
	PRT_AUTOMATIC_DETECTED_REPORT					= 8,
	PRT_AUTOMATIC_STATISTICS_REPORT					= 9,
	PRT_AUTOMATIC_INSTALLED_SOFTWARE_REPORT			= 10,
	PRT_AUTOMATIC_VZ_STATISTICS_REPORT_OBSOLETE		= 11,
	PRT_AUTOMATIC_UTW7AGENT_PRE_MIGRATION_OBSOLETE	= 12,
	PRT_AUTOMATIC_UTW7AGENT_POST_MIGRATION_OBSOLETE	= 13,
	PRT_AUTOMATIC_TRANSPORTER_REPORT				= 14,
	PRT_USER_DEFINED_TRANSPORTER_REPORT				= 15,
	PRT_AUTOMATIC_GUEST_GENERATED_REPORT			= 16,
	PRT_USER_DEFINED_ON_CONTAINER_REPORT_OBSOLETE	= 17,
	PRT_USER_DEFINED_ON_MOBILE_REPORT				= 18,
	PRT_USER_DEFINED_ON_MOBILE_FEEDBACK_REPORT		= 19,
	PRT_RAS_AUTOMATIC_STATISTICS_REPORT				= PRT_AUTOMATIC_DETECTED_REPORT,
	PRT_RAS_USER_DEFINED_REPORT						= 20,
	PRT_RAS_CRASH_REPORT							= 21,
	PRT_AUTOMATIC_PI_STATISTICS_REPORT				= 22,
	PRT_TOOLBOX_USER_DEFINED_REPORT					= 23,
	PRT_TOOLBOX_AUTO_GENERATED_REPORT					= 24,
	PRT_AUTOMATIC_GRAPHICS_CRASH_REPORT				= 25,
	/* NOTE: all new values should be approved on report-server-side */
	PRT_LAST										= PRT_AUTOMATIC_GRAPHICS_CRASH_REPORT, // Should be equal to the last item
} PRL_PROBLEM_REPORT_TYPE;
typedef PRL_PROBLEM_REPORT_TYPE* PRL_PROBLEM_REPORT_TYPE_PTR;

/**
 * Problem report reason enumeration
 */
typedef enum _PRL_PROBLEM_REPORT_REASON
{
	PRR_UNKNOWN					= 0,
	PRR_BOOT_CAMP				= 1,
	PRR_HANG_LOCKUP				= 2,
	PRR_KEYBOARD				= 3,
	PRR_NETWORK					= 4,
	PRR_PARALLELS_TOOLS			= 5,
	PRR_PERFORMANCE				= 6,
	PRR_PRODUCT_REGISTRATION	= 7,
	PRR_SNAPSHOTS				= 8,
	PRR_SOUND					= 9,
	PRR_SUPPORT_REQUEST			= 10,
	PRR_USB						= 11,
	PRR_VIDEO_3D_GRAPHICS		= 12,
	PRR_OTHER					= 13,
	PRR_BACKUP_OBSOLETE			= 14,
	PRR_MIGRATION_OBSOLETE		= 15,
	PRR_CONNECTION				= 16,
	PRR_LAST					= PRR_CONNECTION,//Should equals to the last item
} PRL_PROBLEM_REPORT_REASON;
typedef PRL_PROBLEM_REPORT_REASON* PRL_PROBLEM_REPORT_REASON_PTR;

/**
 * Appliance download status
 */
typedef enum _PRL_APPLIANCE_DOWNLOAD_STATUS
{
	PADS_NOT_STARTED		= 1,
	PADS_STOPPED			= 2,
	PADS_DOWNLOADING		= 3,
	PADS_DOWNLOADED			= 4,
	PADS_UNPACKED			= 5,
	PADS_MOVED				= 6,
	PADS_REGISTERED			= 7,
	PADS_CANCELED			= 8,
	PADS_RECONNECTING		= 9
} PRL_APPLIANCE_DOWNLOAD_STATUS;
typedef PRL_APPLIANCE_DOWNLOAD_STATUS* PRL_APPLIANCE_DOWNLOAD_STATUS_PTR;


#define PRL_VM_STOP_MODE_MASK 0xff
/*
 * Vm stop modes
 */
typedef enum _PRL_VM_STOP_MODE
{
	PSM_KILL		= 0,
	PSM_SHUTDOWN		= 1,
	PSM_ACPI		= 2,

	PSM_LAST		= PSM_ACPI, //Should equals to the last item

} PRL_VM_STOP_MODE;

/*
* SmartGuard schema
*/
typedef enum _PRL_VM_SMARTGUARD_SCHEMA
{
	PVSS_OPTIMIZED_FOR_TIME_MACHINE	= 1, // Automatic schema for time machine
	PVSS_CUSTOM	= 2, // User defined schema
} PRL_VM_SMARTGUARD_SCHEMA;
typedef PRL_VM_SMARTGUARD_SCHEMA* PRL_VM_SMARTGUARD_SCHEMA_PTR;

/*
 * Sound channel type
 */
typedef enum _PRL_SOUND_CHANNEL_TYPE
{
	PSCT_AUTO			= 0,
	PSCT_STEREO			= 1,
	PSCT_SURROUND_5_1	= 2,
} PRL_SOUND_CHANNEL_TYPE;
typedef PRL_SOUND_CHANNEL_TYPE* PRL_SOUND_CHANNEL_TYPE_PTR;


typedef enum _PRL_VM_NET_ADAPTER_TYPE
{
	PNT_UNDEFINED		= 0,
	PNT_RTL			= 1,
	PNT_E1000		= 2,
	PNT_VIRTIO		= 3,
	PNT_E1000E		= 4,
} PRL_VM_NET_ADAPTER_TYPE;
typedef PRL_VM_NET_ADAPTER_TYPE* PRL_VM_NET_ADAPTER_TYPE_PTR;

typedef enum _PRL_VM_NET_ADAPTER_WIFI_RULE
{
	PNWR_GENERATED_MAC	= 0,
	PNWR_HOST_MAC	= 1,
	PNWR_AUTO		= 2,
} PRL_VM_NET_ADAPTER_WIFI_RULE;
typedef PRL_VM_NET_ADAPTER_WIFI_RULE* PRL_VM_NET_ADAPTER_WIFI_RULE_PTR;

typedef enum _PRL_UIEMU_ELEMENT_CONTROL_TYPE
{
	PRL_UIEMU_ELEMENT_CONTROL_NONE		= 0,
	PRL_UIEMU_ELEMENT_CONTROL_OTHER		= 1,
	PRL_UIEMU_ELEMENT_CONTROL_EDIT		= 2,
} PRL_UIEMU_ELEMENT_CONTROL_TYPE;
typedef PRL_UIEMU_ELEMENT_CONTROL_TYPE* PRL_UIEMU_ELEMENT_CONTROL_TYPE_PTR;

typedef enum _PRL_UIEMU_SCROLL_UNITS
{
	PRL_UIEMU_SCROLL_PIXELS				= 1,
	PRL_UIEMU_SCROLL_LINES				= 2,
	PRL_UIEMU_SCROLL_POINTS				= 3,
} PRL_UIEMU_SCROLL_UNITS;
typedef PRL_UIEMU_SCROLL_UNITS* PRL_UIEMU_SCROLL_UNITS_PTR;

typedef enum _PRL_UIEMU_SCROLL_FLAGS
{
	PRL_UIEMU_SCROLL_FLAG_APPEND		= 0,
	PRL_UIEMU_SCROLL_FLAG_NEW			= 1,
} PRL_UIEMU_SCROLL_FLAGS;
typedef PRL_UIEMU_SCROLL_FLAGS* PRL_UIEMU_SCROLL_FLAGS_PTR;

typedef enum _PRL_UIEMU_MOUSE_CLICK
{
	PMB_UIEMU_SINGLE_CLICK	= 1,
	PMB_UIEMU_DOUBLE_CLICK	= 2,
	PMB_UIEMU_TRIPLE_CLICK	= 3,
} PRL_UIEMU_MOUSE_CLICK;
typedef PRL_UIEMU_MOUSE_CLICK* PRL_UIEMU_MOUSE_CLICK_PTR;

typedef enum _PRL_UIEMU_MMKEY
{
	PRL_UIEMU_MMKEY_SWIPE_LEFT_EDGE = 19,
	PRL_UIEMU_MMKEY_SWIPE_RIGHT_EDGE = 20,
	PRL_UIEMU_MMKEY_SWIPE_TOP_EDGE = 21,
	PRL_UIEMU_MMKEY_SWIPE_BOTTOM_EDGE = 22,
} PRL_UIEMU_MMKEY;
typedef PRL_UIEMU_MMKEY* PRL_UIEMU_MMKEY_PTR;

typedef enum _PRL_UIEMU_GESTURE_TYPE
{
	PRL_UIEMU_GESTURE_TYPE_PINCH = 1,
	PRL_UIEMU_GESTURE_TYPE_SMARTZOOM = 2,
} PRL_UIEMU_GESTURE_TYPE;

typedef PRL_UIEMU_GESTURE_TYPE* PRL_UIEMU_GESTURE_TYPE_PTR;

typedef enum _PRL_UIEMU_GESTURE_STATE
{
	PRL_UIEMU_GESTURE_STATE_BEGIN = 1,
	PRL_UIEMU_GESTURE_STATE_CHANGE = 2,
	PRL_UIEMU_GESTURE_STATE_END = 3,
	PRL_UIEMU_GESTURE_STATE_CANCEL = 4,
} PRL_UIEMU_GESTURE_STATE;
typedef PRL_UIEMU_GESTURE_STATE* PRL_UIEMU_GESTURE_STATE_PTR;

/**
 * Features matrix list
 */
typedef enum _PRL_FEATURES_MATRIX
{
	PFSM_UNKNOWN_FEATURE = 0,
	PFSM_SATA_HOTPLUG_SUPPORT = 1,
	PFSM_DEFAULT_SATA_ALLOWED = PFSM_SATA_HOTPLUG_SUPPORT,
	PFSM_VM_CONFIG_MERGE_SUPPORT = 2,
	PFSM_PSBM5 = 3,
	PFSM_AUTOSTART_VM_AS_OWNER = 4,
	PFSM_DEFAULT_PLAINDISK_ALLOWED = 5,
	PFSM_NO_SHARED_NETWORKING = 6,
	PFSM_DISK_IO_LIMITS = 7,
	PFSM_FINE_CPU_LIMITS_OBSOLETE = 8,
	PFSM_ROUTED_NETWORKING_OBSOLETE = 9,
	PFSM_RAM_HOTPLUG_SUPPORT = 10,
	PFSM_CPU_HOTPLUG_SUPPORT = 11,
	PFSM_IPV6_SUPPORT = 12,
	PFSM_USB_PRINTER_SUPPORT = 13,
	PFSM_NIC_CHANGE_ALLOWED = 14,
	PFSM_DESKTOP_CONTROL_SUPPORT = 15,
	PFSM_HEADLESS_MODE = 16,
	PFSM_ENCRYPTION_PLUGINS = 17,
	PFSM_VM_COLORING = 18,
	PFSM_CUSTOM_NETWORK_EDITOR = 19,
	PFSM_NESTED_VIRTUALIZATION = 20,
	PFSM_LINKED_CLONES = 21,
	PFSM_ROLLBACK_MODE = 22,
	PFSM_VM_TEMPLATES = 23,
	PFSM_VM_ALL_PROFILES = 24,
	PFSM_PMU_VIRTUALIZATION = 25,
	PFSM_CPU_AND_RAM_UNREDUCED = 26,
	PFSM_VM_STARTUP_DELAY = 27,
	PFSM_VM_NET_CONDITIONER = 28,
	PFSM_VM_LIST_SORTING = 29,
	PFSM_PDCC_DEVELOPER_PANEL = 30,
	PFSM_VM_ED_DEV_SETTINGS = 31,
	PFSM_TOOLS_AUTOUPDATE = 32,
	PFSM_SYNC_VM_HOSTNAME = 33,
	PFSM_USE_SSH_KEYS_FROM_HOST = 34,
	PFSM_RESOURCE_QUOTA = 35,
	PFSM_REQUIRE_CUSTOM_PASSWORD = 36,
	PFSM_SINGLE_APPLICATION_MODE = 37,
	PFSM_SHOW_NETWORK_GUEST_IPS = 38,
	PFSM_EXTENDED_MEMORY_LIMITS = 39,
	PFSM_OPEN_VIRTUAL_NETWORKS = 40,
	PFSM_SHARED_CCID = 41,
	PFSM_BACKUP_API = 42,
	PFSM_EXTERNAL_DISK = 43,
	PFSM_TPM = 44,

/**
 * PAX Features list
 */
	PFSM_PAX_FEATURE_RANGE_START = 1000,
	PFSM_PAX_FEATURE_MATRIX_SUPPORT = PFSM_PAX_FEATURE_RANGE_START,
	PFSM_PAX_FEATURE_MULTICLIENT_CONNECT,
    PFSM_PAX_FEATURE_GAME_MODE,
	PFSM_PAX_FEATURE_RANGE_END
} PRL_FEATURES_MATRIX;
typedef PRL_FEATURES_MATRIX* PRL_FEATURES_MATRIX_PTR;

typedef enum _PRL_DISTRO_MEDIA_TYPE
{
	DMT_DISTRO = 0,	// Ordinary distro
	DMT_LIVE_CD,	// LiveCD
	DMT_MBR,		// Media has Master Boot Record
} PRL_DISTRO_MEDIA_TYPE;
typedef PRL_DISTRO_MEDIA_TYPE* PRL_DISTRO_MEDIA_TYPE_PTR;

/**
* VTD status code
*/
typedef enum _PRL_VTD_STATUS_CODE
{
	PVSC_DMAR_NOT_FOUND		= -5,
	PVSC_DMAR_ERROR			= -4,
	PVSC_ACPI_ERROR			= -3,
	PVSC_HARDWARE_ERROR		= -2,
	PVSC_INTERNAL_ERROR		= -1,
	PVSC_NOT_PRESENT		= 0,
	PVSC_ENABLED			= 1,
} PRL_VTD_STATUS_CODE;
typedef PRL_VTD_STATUS_CODE* PRL_VTD_STATUS_CODE_PTR;

/**
 * Data statistic segments
 */
typedef enum _PRL_DATA_STATISTIC_SEGMENTS
{
	PDSS_UNKNOWN					= 0,
	PDSS_VM_MISCELLANEOUS_SPACE		= 1,
	PDSS_VM_RECLAIM_SPACE			= 2,
	PDSS_VM_SNAPSHOTS_SPACE			= 3,
	PDSS_VM_DISK_DATA_SPACE			= 4,
	PDSS_VM_FULL_SPACE				= 5,

	PDSS_VM_SUSPEND_SPACE			= 6,

	PDSS_LAST = PDSS_VM_SUSPEND_SPACE
} PRL_DATA_STATISTIC_SEGMENTS;
typedef PRL_DATA_STATISTIC_SEGMENTS* PRL_DATA_STATISTIC_SEGMENTS_PTR;

/*
 * Proxy connection status
 */
typedef enum _PRL_PROXY_CONNECTION_STATUS
{
	PCS_DISCONNECTED	= 0,
	PCS_CONNECTED		= 1,
	PCS_CONNECTING		= 2,
} PRL_PROXY_CONNECTION_STATUS;
typedef PRL_PROXY_CONNECTION_STATUS* PRL_PROXY_CONNECTION_STATUS_PTR;

/*
 * Clustered device subtype
 */
typedef enum _PRL_CLUSTERED_DEVICE_SUBTYPE
{
	PCD_BUSLOGIC			= 0,
	PCD_LSI_SPI				= 1,
	PCD_LSI_SAS				= 2,
	PCD_PCI_NVME			= 3,
	PCD_UNKNOWN_DEVICE		= 255,
} PRL_CLUSTERED_DEVICE_SUBTYPE;
typedef PRL_CLUSTERED_DEVICE_SUBTYPE* PRL_CLUSTERED_DEVICE_SUBTYPE_PTR;

/*
 * BIOS type
 */
typedef enum _PRL_BIOS_TYPE
{
	PBT_LEGACY    = 0,
	PBT_EFI       = 1,
	PBT_EFI64     = PBT_EFI,
	PBT_EFI32     = 2,
	PBT_EFI_ARM64 = 5,
	PBT_EFI_ARM32 = 6,
} PRL_BIOS_TYPE;
typedef PRL_BIOS_TYPE* PRL_BIOS_TYPE_PTR;

/*
 * UEFI SecureBoot state
 */
typedef enum _PRL_SECURE_BOOT_STATE
{
	PSBT_DISABLED		= 0,
	PSBT_ENABLED		= 1,
	PSBT_FORCED_FOR_TPM	= 2
} PRL_SECURE_BOOT_STATE;

/*
 * Video adapter type
 */
typedef enum _PRL_VIDEO_ADAPTER_TYPE
{
	PVAT_PARALLELS	= 0,
	PVAT_VIRTIO		= 1,
	PVAT_APPLE		= 2,
} PRL_VIDEO_ADAPTER_TYPE;
typedef PRL_VIDEO_ADAPTER_TYPE* PRL_VIDEO_ADAPTER_TYPE_PTR;

/*
 * Video 3D acceleration
 */
typedef enum _PRL_VIDEO_3D_ACCELERATION
{
	P3D_DISABLED			= 0,
	P3D_ENABLED_HIGHEST		= 1,
	P3D_ENABLED_DX9			= 2,
} PRL_VIDEO_3D_ACCELERATION;
typedef PRL_VIDEO_3D_ACCELERATION* PRL_VIDEO_3D_ACCELERATION_PTR;

/*
 * Display(s) configuration mode
 */
typedef enum _PRL_DISPLAY_CONFIG_MODE
{
	PDCM_CLIENT_DISPLAY_INFO	= (1 << 0),
	PDCM_HAS_HIDPI_DISPLAY		= (1 << 1),
	PDCM_DO_NOT_RESTORE		= (1 << 2),
	PDCM_RESTORE_DEFAULT		= (1 << 3),
	PDCM_DISABLE_HIDPI_ADJUSTMENT	= (1 << 4),
	PDCM_RETINA_MODE	= (1 << 5),
	PDCM_ENABLE_HEADS	= (1 << 6),
	PDCM_REFRESH_RATE	= (1 << 7), // hiword is display refresh rate
} PRL_DISPLAY_CONFIG_MODE;
typedef PRL_DISPLAY_CONFIG_MODE* PRL_DISPLAY_CONFIG_MODE_PTR;

/**
 * Taskbar states
 */
typedef enum _PRL_TASKBAR_STATES
{
	PTBS_UNKNOWN	= -1,
	PTBS_HIDE		= 0,
	PTBS_SHOW		= 1,
	PTBS_DEFAULT	= 2,
} PRL_TASKBAR_STATES;

/**
 * Power scheme sleep ability possible values
 */
typedef enum _PRL_POWER_SCHEME_SLEEP_ABILITY
{
	PPSSA_UNKNOWN		= -1,
	PPSSA_SLEEP_FORBID	= 0,
	PPSSA_SLEEP_ALLOW	= 1,
} PRL_POWER_SCHEME_SLEEP_ABILITY;

/**
 * Query element flags
 */
typedef enum _PRL_QUERY_ELEMENT_FLAGS
{
	PRL_UIEMU_ELEMENT_SEARCH_AREA_WINDOW	= 0,
	PRL_UIEMU_ELEMENT_SEARCH_AREA_GLOBAL	= 1,
} PRL_QUERY_ELEMENT_FLAGS;
typedef PRL_QUERY_ELEMENT_FLAGS* PRL_QUERY_ELEMENT_FLAGS_PTR;

/*
 * Authorization mode, when mobile client establishing
 * remote access to the host.
 */
typedef enum _PRL_MOBILE_ADVANCED_AUTH_MODE
{
	PMAA_NO_ADVANCED_AUTH_NEEDED		= 0,
	PMAA_USE_SYSTEM_CREDENTIALS			= 1,
} PRL_MOBILE_ADVANCED_AUTH_MODE;
typedef PRL_MOBILE_ADVANCED_AUTH_MODE* PRL_MOBILE_ADVANCED_AUTH_MODE_PTR;

/*
 * Determines the mode of modifiers handling inside the guest
 */
typedef enum _PRL_OPTIMIZE_MODIFIERS_MODE
{
	POD_STANDARD					= 0,
	POD_OPTIMIZE_FOR_GAMES			= 1,
	POD_OPTIMIZE_FOR_ACCESSIBILITY	= 2,
	POD_OPTIMIZE_AUTOMATICALLY		= 3,
} PRL_OPTIMIZE_MODIFIERS_MODE;
typedef PRL_OPTIMIZE_MODIFIERS_MODE* PRL_OPTIMIZE_MODIFIERS_MODE_PTR;


/*
 * Specifies the reason of closing IO connection
 */
typedef enum _PRL_IO_DISCONNECT_REASON
{
	PDR_UNSPECIFIED					= 0,
	PDR_RECONNECT					= 1,
	PDR_HOST_USER_LOGGED_IN			= 2,
	PDR_HOST_USER_INPUT_DETECTED	= 3,
	PDR_ANOTHER_CLIENT_CONNECTED	= 4,
	PDR_SESSION_BECOME_INACTIVE		= 5,
	PDR_HOST_USER_FORCED_DISCONNECT = 6,
} PRL_IO_DISCONNECT_REASON;
typedef PRL_IO_DISCONNECT_REASON* PRL_IO_DISCONNECT_REASON_PTR;


/**
 * Streaming connection status enum
 */
typedef enum PRL_VIDEO_RECEIVER_CONNECTION_STATE
{
	PVRCS_CONNECTED          = 0,
	PVRCS_DISCONNECTED       = 1,
	PVRCS_NO_CONNECTION      = 2,
	PVRCS_CONNECTING         = 3,
} PRL_VIDEO_RECEIVER_CONNECTION_STATE;
typedef PRL_VIDEO_RECEIVER_CONNECTION_STATE* PRL_VIDEO_RECEIVER_CONNECTION_STATE_PTR;

/**
 * Audio stream type
 */
typedef enum PRL_AUDIO_STREAM_TYPE
{
	PAUST_PLAYOUT			= 0,
	PAUST_RECORDING			= 1,
	PAUST_PLAYOUT_BG_MODE	= 2,
	PAUST_RECORDING_BG_MODE	= 3,
} PRL_AUDIO_STREAM_TYPE;
typedef PRL_AUDIO_STREAM_TYPE* PRL_AUDIO_STREAM_TYPE_PTR;

/**
 * Virtual machine profiles enum
 */
typedef enum _PRL_VIRTUAL_MACHINE_PROFILE
{
	VMP_PRODUCTIVITY			= 0,
	VMP_GAMES					= 1,
	VMP_SOFTWARE_DEVELOPER		= 2,
	VMP_DESIGNER				= 3,
	VMP_TESTER					= 4,

	VMP_LAST					= VMP_TESTER // NOTE: should be set to the latest value
} PRL_VIRTUAL_MACHINE_PROFILE;
typedef PRL_VIRTUAL_MACHINE_PROFILE* PRL_VIRTUAL_MACHINE_PROFILE_PTR;

/**
 * Virtual network adapter profiles enum
 */
typedef enum _PRL_VIRTUAL_NET_ADAPTER_PROFILE
{
	VNAP_100_PERCENT_LOSS		= 0,
	VNAP_3G						= 1,
	VNAP_DSL					= 2,
	VNAP_EDGE					= 3,
	VNAP_VERY_BAD_NET			= 4,
	VNAP_WI_FI					= 5,
} PRL_VIRTUAL_NET_ADAPTER_PROFILE;
typedef PRL_VIRTUAL_NET_ADAPTER_PROFILE* PRL_VIRTUAL_NET_ADAPTER_PROFILE_PTR;

/**
 * Tools events, passed to the callback (see PRL_VMCTG_TOOL_DESC and PRL_TOOL_HANDLER_PTR above)
 */
typedef enum _PRL_VMCTG_EVENT
{
	TEV_DATA_RECEIVED,		// pData is PRL_TOOL_DATA_RECEIVED*
	TEV_CONNECTED,			// pData is null
	TEV_DISCONNECTED,		// pData is null
} PRL_VMCTG_EVENT;
typedef PRL_VMCTG_EVENT* PRL_VMCTG_EVENT_PTR;

/**
 * Online compact mode for virtual machine disks
 */
typedef enum _PRL_ONLINE_COMPACT_MODE
{
	POCM_DISABLED		= 0,
	POCM_ENABLED		= 1,
	POCM_AUTO			= 2,
} PRL_ONLINE_COMPACT_MODE;
typedef PRL_ONLINE_COMPACT_MODE* PRL_ONLINE_COMPACT_MODE_PTR;

/**
 * Vm packing state
 */
typedef enum _PRL_VM_PACKING_STATE
{
	PPS_UNKNOWN		= 0,
	PPS_UNPACKED	= 1,
	PPS_TRANSITION	= 2,
	PPS_PACKED		= 3
} PRL_VM_PACKING_STATE;
typedef PRL_VM_PACKING_STATE* PRL_VM_PACKING_STATE_PTR;

/**
 * Vm packing direction
 */
typedef enum _PRL_VM_PACKING_DIRECTION
{
	PPD_UNKNOWN		= 0,
	PPD_UNPACKING	= 1,
	PPD_PACKING		= 2
} PRL_VM_PACKING_DIRECTION;
typedef PRL_VM_PACKING_DIRECTION* PRL_VM_PACKING_DIRECTION_PTR;

/**
 * Vm packing direction
 */
typedef enum _PRL_VM_PACKING_PROGRESS_TYPE
{
	PPT_UNKNOWN		= 0,
	PPT_VALIDATION	= 1,
	PPT_OPERATION	= 2,
	PPT_CHECKSUM	= 3
} PRL_VM_PACKING_PROGRESS_TYPE;
typedef PRL_VM_PACKING_PROGRESS_TYPE* PRL_VM_PACKING_PROGRESS_TYPE_PTR;



/**
 * Last shutdown reason
 */
typedef enum _PRL_SHUTDOWN_REASON
{
	PSR_TOOLS_SHUTDOWN	= 0,  // Shutdown was made from Guest OS using Parallels Tools
	PSR_HIBERNATED		= 1,  // Guest was hibernated
	PSR_HYBRID_SHUTDOWN	= 2,  // Windows hybrid shutdown
	PSR_TOOLS_JUSTINSTALLED_SHUTDOWN	= 3,  // First shutdown Windows after tools installation
	PSR_LONG_RESET		= 4,  // Reset by shutdown-start (long reset to apply VM config changes)
	PSR_SHUTDOWN_UNKNOWN	= -1, // Vm was stopped, reason unknown.
} PRL_SHUTDOWN_REASON;
typedef PRL_SHUTDOWN_REASON* PRL_SHUTDOWN_REASON_PTR;

/**
 * File sharing item access mode mask
 */
typedef enum _PRL_SHARED_ITEM_ACCESS_MASK
{
	PSAM_READ_ACCESS	= 1<<0,  // Read access granted to the item
	PSAM_WRITE_ACCESS	= 1<<1,  // Write access granted to the item
} PRL_SHARED_ITEM_ACCESS_MASK;
typedef PRL_SHARED_ITEM_ACCESS_MASK* PRL_SHARED_ITEM_ACCESS_MASK_PTR;


/**
 * File sharing item flags
 */
typedef enum _PRL_SHARED_ITEM_FLAGS
{
	PSHF_FLAG_HIDDEN			= 1<<0, // shared item is not visible to clients
	PSHF_FLAG_DISABLED			= 1<<1, // shared item is disabled for remote access
	PSHF_FLAG_DIRECT_DOWNLOAD	= 1<<2, // prefer direct download method for shard item
	PSHF_FLAG_RESET_DOWNLOADS	= 1<<3, // reset download statistic
} PRL_SHARED_ITEM_FLAGS;
typedef PRL_SHARED_ITEM_FLAGS* PRL_SHARED_ITEM_FLAGS_PTR;


/**
 * Battery enter conditions
 */
typedef enum _PRL_BATTERY_ENTER_CONDITION
{
	PBEC_NEVER					= 0,
	PBEC_ALWAYS_ON_BATTERY		= 1,
	PBEC_BATTERY_THRESHOLD		= 2,
} PRL_BATTERY_ENTER_CONDITION;
typedef PRL_BATTERY_ENTER_CONDITION* PRL_BATTERY_ENTER_CONDITION_PTR;

/**
 * Battery quit conditions
 */
typedef enum _PRL_BATTERY_QUIT_CONDITION
{
	PBQC_NEVER					= 0,
	PBQC_CONNECTED_TO_POWER		= 1,
} PRL_BATTERY_QUIT_CONDITION;
typedef PRL_BATTERY_QUIT_CONDITION* PRL_BATTERY_QUIT_CONDITION_PTR;

/**
 * VM debugger states
 */
typedef enum _PRL_VM_DEBUGGER_STATE
{
	PVMD_SERVER_DISABLED	= 0,	// debug server is disabled
	PVMD_SERVER_ENABLED		= 1,	// debug server is enabled (no clients attached)
	PVMD_CLIENT_DETACHED	= PVMD_SERVER_ENABLED,	// client detached (alias for server enabled)
	PVMD_GUEST_RUNNING		= 2,	// client attached, guest is running
	PVMD_GUEST_STOPPED		= 3,	// client attached, guest is stopped
} PRL_VM_DEBUGGER_STATE;

/**
 * Hypervisor types
 */
typedef enum _PRL_HYPERVISOR_TYPE
{
	PHVT_PARALLELS	= 0,
	PHVT_APPLE		= 1,
} PRL_HYPERVISOR_TYPE;
typedef PRL_HYPERVISOR_TYPE* PRL_HYPERVISOR_TYPE_PTR;

/**
 * Windows maintenance schedule day or days
 */
typedef enum _PRL_WIN_MAINTENANCE_SCHEDULE_DAY
{
	PWMSD_EVERYDAY	= 0,
	PWMSD_MONDAY	= 1,
	PWMSD_TUESDAY	= 2,
	PWMSD_WEDNESDAY	= 3,
	PWMSD_THURSDAY	= 4,
	PWMSD_FRIDAY	= 5,
	PWMSD_SATURDAY	= 6,
	PWMSD_SUNDAY	= 7,
	PWMSD_WEEKDAYS	= 8,
	PWMSD_WEEKENDS	= 9,
} PRL_WIN_MAINTENANCE_SCHEDULE_DAY;

/**
 * Backup file kinds
 */
typedef enum _PRL_BACKUP_FILE_KIND
{
	PBFK_UNKNOWN			= 0,
	PBFK_DISK_IMAGE			= 1,
	PBFK_DISK_CONFIG		= 2,
	PBFK_VM_CONFIG			= 3,
	PBFK_LOG				= 4,
	PBFK_SYMLINK			= 5,
} PRL_BACKUP_FILE_KIND;
typedef PRL_BACKUP_FILE_KIND* PRL_BACKUP_FILE_KIND_PTR;

/**
 * Backup file types
 */
typedef enum _PRL_BACKUP_FILE_TYPE
{
	PBFT_UNKNOWN			= 0,
	PBFT_MANDATORY			= 1,
	PBFT_OPTIONAL			= 2,
	PBFT_MANDATORY_EXTERNAL	= 3
} PRL_BACKUP_FILE_TYPE;
typedef PRL_BACKUP_FILE_TYPE* PRL_BACKUP_FILE_TYPE_PTR;

/**
 * Backup file levels
 */
typedef enum _PRL_BACKUP_LEVEL
{
	PBL_UNKNOWN			= 0,
	PBL_FULL				= 1,
	PBL_INCREMENTAL		= 2,
} PRL_BACKUP_LEVEL;
typedef PRL_BACKUP_LEVEL* PRL_BACKUP_LEVEL_PTR;

/**
 * Backup options
 */
typedef enum _PRL_BACKUP_OPTIONS
{
	PBOPT_DISABLE_GUEST_FS_SUSPEND	= 1<<0, // Disable guest fs suspend optimization for running VM
} PRL_BACKUP_OPTIONS;

/**
 * Virtual machine resource quota
 */
typedef enum _PRL_VM_RESOURCE_QUOTA
{
	PRQ_LOW				= 0,
	PRQ_MEDIUM			= 50,
	PRQ_UNLIMITED		= 100,
} PRL_VM_RESOURCE_QUOTA;

/**
 * Startup and shutdown virtual machine profile types
 */
typedef enum _PRL_STARTUP_AND_SHUTDOWN_PROFILE
{
	PSSP_CUSTOM							= -1,
	PSSP_MANUAL_STARTUP_AND_SHUTDOWN	= 0,
	PSSP_READY_IN_BACKGROUND			= 1,
} PRL_STARTUP_AND_SHUTDOWN_PROFILE;

/**
 * Keyboard hardware layout
 */
typedef enum _PRL_KEYBOARD_HW_LAYOUT
{
	PKHL_BY_HOST	= 0,
	PKHL_ANSI		= 1,
	PKHL_ISO		= 2,
	PKHL_JIS		= 3
} PRL_KEYBOARD_HW_LAYOUT;

/**
 * Privacy mode device access authorization state
 */
typedef enum _PRL_PRIVACY_RESTRICTION
{
	PPR_ACCESS_NOT_DETERMINED	= -1,
	PPR_ACCESS_ALLOWED			= 0,
	PPR_ACCESS_DENIED			= 1,
	PPR_ACCESS_NOT_USED			= 2,
} PRL_PRIVACY_RESTRICTION;

typedef enum _PRL_TPM_TYPE
{
	PTT_TPM_DISABLED	= 0,
	PTT_TPM_2_0			= 20,
	PTT_TPM_2_0_CRB		= 201,
	PTT_TPM_DEFAULT		= PTT_TPM_2_0,
} PRL_TPM_TYPE;
typedef PRL_TPM_TYPE* PRL_TPM_TYPE_PTR;

typedef enum _PRL_TPM_POLICY
{
	PTP_TPM_PLAIN	= 0,
	PTP_TPM_GUID,
	PTP_TPM_PASSWORD,
	PTP_TPM_KEYCHAIN,
} PRL_TPM_POLICY;

typedef enum _PRL_PAX_SUPPORT_MODE_STATUS
{
	PAXSM_DISABLED = 0,
	PAXSM_NOT_CONFIRMED,
	PAXSM_ENABLED,
} PRL_PAX_SUPPORT_MODE_STATUS;
typedef PRL_PAX_SUPPORT_MODE_STATUS* PRL_PAX_SUPPORT_MODE_STATUS_PTR;

#include "PrlCommandsFlags.h"

#endif // __PARALLELS_API_ENUMS_H__
